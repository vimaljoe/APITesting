<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WireMock.Net</name>
    </assembly>
    <members>
        <member name="T:WireMock.Authentication.AzureADAuthenticationMatcher">
            <summary>
            https://www.c-sharpcorner.com/article/how-to-validate-azure-ad-token-using-console-application/
            https://stackoverflow.com/questions/38684865/validation-of-an-azure-ad-bearer-token-in-a-console-application
            </summary>
        </member>
        <member name="T:WireMock.Exceptions.WireMockException">
            <summary>
            WireMockException
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:WireMock.Exceptions.WireMockException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Exceptions.WireMockException"/> class.
            </summary>
        </member>
        <member name="M:WireMock.Exceptions.WireMockException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Exceptions.WireMockException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:WireMock.Exceptions.WireMockException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Exceptions.WireMockException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:WireMock.Handlers.LocalFileSystemHandler">
            <summary>
            Default implementation for a handler to interact with the local file system to read and write static mapping files.
            </summary>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Handlers.LocalFileSystemHandler"/> class.
            </summary>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Handlers.LocalFileSystemHandler"/> class.
            </summary>
            <param name="rootFolder">The root folder.</param>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.FolderExists(System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.FolderExists(System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.CreateFolder(System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.CreateFolder(System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.EnumerateFiles(System.String,System.Boolean)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.EnumerateFiles(System.String,System.Boolean)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.GetMappingFolder">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.GetMappingFolder"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.ReadMappingFile(System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.ReadMappingFile(System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.WriteMappingFile(System.String,System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.WriteMappingFile(System.String,System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.ReadResponseBodyAsFile(System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.ReadResponseBodyAsFile(System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.ReadResponseBodyAsString(System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.ReadResponseBodyAsString(System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.FileExists(System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.FileExists(System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.WriteFile(System.String,System.Byte[])">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.WriteFile(System.String,System.Byte[])"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.DeleteFile(System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.DeleteFile(System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.ReadFile(System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.ReadFile(System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.ReadFileAsString(System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.ReadFileAsString(System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.GetUnmatchedRequestsFolder">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.GetUnmatchedRequestsFolder"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.WriteUnmatchedRequest(System.String,System.String)">
            <inheritdoc cref="M:WireMock.Handlers.IFileSystemHandler.WriteUnmatchedRequest(System.String,System.String)"/>
        </member>
        <member name="M:WireMock.Handlers.LocalFileSystemHandler.AdjustPathForMappingFolder(System.String)">
            <summary>
            Adjusts the path to the MappingFolder.
            </summary>
            <param name="filename">The path.</param>
            <returns>Adjusted path</returns>
        </member>
        <member name="M:WireMock.HttpsCertificate.CertificateLoader.LoadCertificate(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Used by the WireMock.Net server
            </summary>
        </member>
        <member name="M:WireMock.HttpsCertificate.CertificateLoader.LoadCertificate(System.String)">
            <summary>
            Used for Proxy
            </summary>
        </member>
        <member name="T:WireMock.HttpsCertificate.PublicCertificateHelper">
            <summary>
            Only used for NetStandard 1.3
            </summary>
        </member>
        <member name="M:WireMock.Http.ByteArrayContentHelper.Create(System.Byte[],System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Creates a ByteArrayContent object.
            </summary>
            <param name="content">The byte[] content (cannot be null)</param>
            <param name="contentType">The ContentType (can be null)</param>
            <returns>ByteArrayContent</returns>
        </member>
        <member name="T:WireMock.Http.HttpKnownHeaderNames">
            <summary>
            Copied from https://raw.githubusercontent.com/dotnet/corefx/master/src/Common/src/System/Net/HttpKnownHeaderNames.cs
            </summary>
        </member>
        <member name="M:WireMock.Http.HttpKnownHeaderNames.IsRestrictedResponseHeader(System.String)">
            <summary>Tests whether the specified HTTP header can be set for the response.</summary>
            <param name="headerName">The header to test.</param>
            <returns>true if the header is restricted; otherwise, false.</returns>
        </member>
        <member name="T:WireMock.Http.HttpRequestMethods">
            <summary>
            https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods
            </summary>
        </member>
        <member name="M:WireMock.Http.StringContentHelper.Create(System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Creates a StringContent object.
            </summary>
            <param name="content">The string content (cannot be null)</param>
            <param name="contentType">The ContentType (can be null)</param>
            <returns>StringContent</returns>
        </member>
        <member name="T:WireMock.IMapping">
            <summary>
            The IMapping interface.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.Guid">
            <summary>
            Gets the unique identifier.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.TimeSettings">
            <summary>
            Gets the TimeSettings (Start, End and TTL).
            </summary>
        </member>
        <member name="P:WireMock.IMapping.Title">
            <summary>
            Gets the unique title.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.Path">
            <summary>
            The full filename path for this mapping (only defined for static mappings).
            </summary>
        </member>
        <member name="P:WireMock.IMapping.Priority">
            <summary>
            Gets the priority.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.Scenario">
            <summary>
            Scenario.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.ExecutionConditionState">
            <summary>
            Execution state condition for the current mapping.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.NextState">
            <summary>
            The next state which will be signaled after the current mapping execution.
            In case the value is null, state will not be changed.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.StateTimes">
            <summary>
            The number of times this match should be matched before the state will be changed to the next state.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.RequestMatcher">
            <summary>
            The Request matcher.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.Provider">
            <summary>
            The Provider.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.Settings">
            <summary>
            The WireMockServerSettings.
            </summary>
        </member>
        <member name="P:WireMock.IMapping.IsStartState">
            <summary>
            Is State started ?
            </summary>
        </member>
        <member name="P:WireMock.IMapping.IsAdminInterface">
            <summary>
            Gets a value indicating whether this mapping is an Admin Interface.
            </summary>
            <value>
            <c>true</c> if this mapping is an Admin Interface; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WireMock.IMapping.LogMapping">
            <summary>
            Gets a value indicating whether this mapping to be logged.
            </summary>
            <value>
            <c>true</c> if this mapping to be logged; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WireMock.IMapping.Webhooks">
            <summary>
            The Webhooks.
            </summary>
        </member>
        <member name="M:WireMock.IMapping.ProvideResponseAsync(WireMock.RequestMessage)">
            <summary>
            ProvideResponseAsync
            </summary>
            <param name="requestMessage">The request message.</param>
            <returns>The <see cref="T:WireMock.ResponseMessage"/> including a new (optional) <see cref="T:WireMock.IMapping"/>.</returns>
        </member>
        <member name="M:WireMock.IMapping.GetRequestMatchResult(WireMock.RequestMessage,System.String)">
            <summary>
            Gets the RequestMatchResult based on the RequestMessage.
            </summary>
            <param name="requestMessage">The request message.</param>
            <param name="nextState">The Next State.</param>
            <returns>The <see cref="T:WireMock.Matchers.Request.IRequestMatchResult"/>.</returns>
        </member>
        <member name="T:WireMock.Logging.LogEntry">
            <summary>
            LogEntry
            </summary>
        </member>
        <member name="P:WireMock.Logging.LogEntry.Guid">
            <inheritdoc cref="P:WireMock.Logging.ILogEntry.Guid" />
        </member>
        <member name="P:WireMock.Logging.LogEntry.RequestMessage">
            <inheritdoc cref="P:WireMock.Logging.ILogEntry.RequestMessage" />
        </member>
        <member name="P:WireMock.Logging.LogEntry.ResponseMessage">
            <inheritdoc cref="P:WireMock.Logging.ILogEntry.ResponseMessage" />
        </member>
        <member name="P:WireMock.Logging.LogEntry.RequestMatchResult">
            <inheritdoc cref="P:WireMock.Logging.ILogEntry.RequestMatchResult" />
        </member>
        <member name="P:WireMock.Logging.LogEntry.MappingGuid">
            <inheritdoc cref="P:WireMock.Logging.ILogEntry.MappingGuid" />
        </member>
        <member name="P:WireMock.Logging.LogEntry.MappingTitle">
            <inheritdoc cref="P:WireMock.Logging.ILogEntry.MappingTitle" />
        </member>
        <member name="P:WireMock.Logging.LogEntry.PartialMappingGuid">
            <inheritdoc cref="P:WireMock.Logging.ILogEntry.PartialMappingGuid" />
        </member>
        <member name="P:WireMock.Logging.LogEntry.PartialMappingTitle">
            <inheritdoc cref="P:WireMock.Logging.ILogEntry.PartialMappingTitle" />
        </member>
        <member name="P:WireMock.Logging.LogEntry.PartialMatchResult">
            <inheritdoc cref="P:WireMock.Logging.ILogEntry.PartialMatchResult" />
        </member>
        <member name="T:WireMock.Logging.WireMockConsoleLogger">
            <summary>
            WireMockConsoleLogger which logs to Console
            </summary>
            <seealso cref="T:WireMock.Logging.IWireMockLogger" />
        </member>
        <member name="M:WireMock.Logging.WireMockConsoleLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Logging.WireMockConsoleLogger"/> class.
            </summary>
        </member>
        <member name="M:WireMock.Logging.WireMockConsoleLogger.Debug(System.String,System.Object[])">
            <see cref="M:WireMock.Logging.IWireMockLogger.Debug(System.String,System.Object[])"/>
        </member>
        <member name="M:WireMock.Logging.WireMockConsoleLogger.Info(System.String,System.Object[])">
            <see cref="M:WireMock.Logging.IWireMockLogger.Info(System.String,System.Object[])"/>
        </member>
        <member name="M:WireMock.Logging.WireMockConsoleLogger.Warn(System.String,System.Object[])">
            <see cref="M:WireMock.Logging.IWireMockLogger.Warn(System.String,System.Object[])"/>
        </member>
        <member name="M:WireMock.Logging.WireMockConsoleLogger.Error(System.String,System.Object[])">
            <see cref="M:WireMock.Logging.IWireMockLogger.Error(System.String,System.Object[])"/>
        </member>
        <member name="M:WireMock.Logging.WireMockConsoleLogger.Error(System.String,System.Exception)">
            <see cref="M:WireMock.Logging.IWireMockLogger.Error(System.String,System.Exception)"/>
        </member>
        <member name="M:WireMock.Logging.WireMockConsoleLogger.DebugRequestResponse(WireMock.Admin.Requests.LogEntryModel,System.Boolean)">
            <see cref="M:WireMock.Logging.IWireMockLogger.DebugRequestResponse(WireMock.Admin.Requests.LogEntryModel,System.Boolean)"/>
        </member>
        <member name="T:WireMock.Logging.WireMockNullLogger">
            <summary>
            WireMockNullLogger which does not log.
            </summary>
            <seealso cref="T:WireMock.Logging.IWireMockLogger" />
        </member>
        <member name="M:WireMock.Logging.WireMockNullLogger.Debug(System.String,System.Object[])">
            <see cref="M:WireMock.Logging.IWireMockLogger.Debug(System.String,System.Object[])"/>
        </member>
        <member name="M:WireMock.Logging.WireMockNullLogger.Info(System.String,System.Object[])">
            <see cref="M:WireMock.Logging.IWireMockLogger.Info(System.String,System.Object[])"/>
        </member>
        <member name="M:WireMock.Logging.WireMockNullLogger.Warn(System.String,System.Object[])">
            <see cref="M:WireMock.Logging.IWireMockLogger.Warn(System.String,System.Object[])"/>
        </member>
        <member name="M:WireMock.Logging.WireMockNullLogger.Error(System.String,System.Object[])">
            <see cref="M:WireMock.Logging.IWireMockLogger.Error(System.String,System.Object[])"/>
        </member>
        <member name="M:WireMock.Logging.WireMockNullLogger.Error(System.String,System.Exception)">
            <see cref="M:WireMock.Logging.IWireMockLogger.Error(System.String,System.Exception)"/>
        </member>
        <member name="M:WireMock.Logging.WireMockNullLogger.DebugRequestResponse(WireMock.Admin.Requests.LogEntryModel,System.Boolean)">
            <see cref="M:WireMock.Logging.IWireMockLogger.DebugRequestResponse(WireMock.Admin.Requests.LogEntryModel,System.Boolean)"/>
        </member>
        <member name="T:WireMock.Mapping">
            <summary>
            The Mapping.
            </summary>
        </member>
        <member name="P:WireMock.Mapping.Guid">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.Title">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.Path">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.Priority">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.Scenario">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.ExecutionConditionState">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.NextState">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.StateTimes">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.RequestMatcher">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.Provider">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.Settings">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.IsStartState">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.IsAdminInterface">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.LogMapping">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.Webhooks">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Mapping.TimeSettings">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Mapping.#ctor(System.Guid,System.String,System.String,WireMock.Settings.IWireMockServerSettings,WireMock.Matchers.Request.IRequestMatcher,WireMock.ResponseProviders.IResponseProvider,System.Int32,System.String,System.String,System.String,System.Nullable{System.Int32},WireMock.Models.IWebhook[],WireMock.Models.ITimeSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Mapping"/> class.
            </summary>
            <param name="guid">The unique identifier.</param>
            <param name="title">The unique title (can be null).</param>
            <param name="path">The full file path from this mapping title (can be null).</param>
            <param name="settings">The WireMockServerSettings.</param>
            <param name="requestMatcher">The request matcher.</param>
            <param name="provider">The provider.</param>
            <param name="priority">The priority for this mapping.</param>
            <param name="scenario">The scenario. [Optional]</param>
            <param name="executionConditionState">State in which the current mapping can occur. [Optional]</param>
            <param name="nextState">The next state which will occur after the current mapping execution. [Optional]</param>
            <param name="stateTimes">Only when the current state is executed this number, the next state which will occur. [Optional]</param>
            <param name="webhooks">The Webhooks. [Optional]</param>
            <param name="timeSettings">The TimeSettings. [Optional]</param>
        </member>
        <member name="M:WireMock.Mapping.ProvideResponseAsync(WireMock.RequestMessage)">
            <inheritdoc cref="M:WireMock.IMapping.ProvideResponseAsync(WireMock.RequestMessage)" />
        </member>
        <member name="M:WireMock.Mapping.GetRequestMatchResult(WireMock.RequestMessage,System.String)">
            <inheritdoc cref="M:WireMock.IMapping.GetRequestMatchResult(WireMock.RequestMessage,System.String)" />
        </member>
        <member name="T:WireMock.RegistrationCallback">
            <summary>
            The registration callback.
            </summary>
            <param name="mapping">The mapping.</param>
            <param name="saveToFile">Optional boolean to indicate if this mapping should be saved as static mapping file.</param>
        </member>
        <member name="T:WireMock.Matchers.AbstractJsonPartialMatcher">
            <summary>
            Generic AbstractJsonPartialMatcher
            </summary>
        </member>
        <member name="M:WireMock.Matchers.AbstractJsonPartialMatcher.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.AbstractJsonPartialMatcher"/> class.
            </summary>
            <param name="value">The string value to check for equality.</param>
            <param name="ignoreCase">Ignore the case from the PropertyName and PropertyValue (string only).</param>
            <param name="throwException">Throw an exception when the internal matching fails because of invalid input.</param>
        </member>
        <member name="M:WireMock.Matchers.AbstractJsonPartialMatcher.#ctor(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.AbstractJsonPartialMatcher"/> class.
            </summary>
            <param name="value">The object value to check for equality.</param>
            <param name="ignoreCase">Ignore the case from the PropertyName and PropertyValue (string only).</param>
            <param name="throwException">Throw an exception when the internal matching fails because of invalid input.</param>
        </member>
        <member name="M:WireMock.Matchers.AbstractJsonPartialMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.AbstractJsonPartialMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="value">The value to check for equality.</param>
            <param name="ignoreCase">Ignore the case from the PropertyName and PropertyValue (string only).</param>
            <param name="throwException">Throw an exception when the internal matching fails because of invalid input.</param>
        </member>
        <member name="M:WireMock.Matchers.AbstractJsonPartialMatcher.IsMatch(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.AbstractJsonPartialMatcher.IsMatch(System.String,System.String)">
            <summary>
            Check if two strings are a match (matching can be done exact or wildcard)
            </summary>
        </member>
        <member name="T:WireMock.Matchers.ContentTypeMatcher">
            <summary>
            ContentTypeMatcher which accepts also all charsets
            </summary>
            <seealso cref="T:WireMock.Matchers.RegexMatcher" />
        </member>
        <member name="M:WireMock.Matchers.ContentTypeMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ContentTypeMatcher"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">IgnoreCase (default false)</param>
        </member>
        <member name="M:WireMock.Matchers.ContentTypeMatcher.#ctor(WireMock.Matchers.MatchBehaviour,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ContentTypeMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">IgnoreCase (default false)</param>
        </member>
        <member name="M:WireMock.Matchers.ContentTypeMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ContentTypeMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">IgnoreCase (default false)</param>
        </member>
        <member name="M:WireMock.Matchers.ContentTypeMatcher.#ctor(WireMock.Matchers.MatchBehaviour,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[],System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ContentTypeMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">IgnoreCase (default false)</param>
            <param name="throwException">Throw an exception when the internal matching fails because of invalid input.</param>
        </member>
        <member name="M:WireMock.Matchers.ContentTypeMatcher.IsMatch(System.String)">
            <inheritdoc cref="M:WireMock.Matchers.RegexMatcher.IsMatch(System.String)"/>
        </member>
        <member name="M:WireMock.Matchers.ContentTypeMatcher.GetPatterns">
            <inheritdoc cref="M:WireMock.Matchers.IStringMatcher.GetPatterns"/>
        </member>
        <member name="P:WireMock.Matchers.ContentTypeMatcher.Name">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.Name"/>
        </member>
        <member name="T:WireMock.Matchers.ExactMatcher">
            <summary>
            ExactMatcher
            </summary>
            <seealso cref="T:WireMock.Matchers.IStringMatcher" />
        </member>
        <member name="P:WireMock.Matchers.ExactMatcher.MatchBehaviour">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.MatchBehaviour"/>
        </member>
        <member name="P:WireMock.Matchers.ExactMatcher.ThrowException">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.ThrowException"/>
        </member>
        <member name="M:WireMock.Matchers.ExactMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ExactMatcher"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:WireMock.Matchers.ExactMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Boolean,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ExactMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="throwException">Throw an exception when the internal matching fails because of invalid input.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:WireMock.Matchers.ExactMatcher.IsMatch(System.String)">
            <inheritdoc cref="M:WireMock.Matchers.IStringMatcher.IsMatch(System.String)"/>
        </member>
        <member name="M:WireMock.Matchers.ExactMatcher.GetPatterns">
            <inheritdoc cref="M:WireMock.Matchers.IStringMatcher.GetPatterns"/>
        </member>
        <member name="P:WireMock.Matchers.ExactMatcher.Name">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.Name"/>
        </member>
        <member name="T:WireMock.Matchers.ExactObjectMatcher">
            <summary>
            ExactObjectMatcher
            </summary>
            <seealso cref="T:WireMock.Matchers.IObjectMatcher" />
        </member>
        <member name="P:WireMock.Matchers.ExactObjectMatcher.ValueAsObject">
            <summary>
            Gets the value as object.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.ExactObjectMatcher.ValueAsBytes">
            <summary>
            Gets the value as byte[].
            </summary>
        </member>
        <member name="P:WireMock.Matchers.ExactObjectMatcher.MatchBehaviour">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.MatchBehaviour"/>
        </member>
        <member name="P:WireMock.Matchers.ExactObjectMatcher.ThrowException">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.ThrowException"/>
        </member>
        <member name="M:WireMock.Matchers.ExactObjectMatcher.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ExactObjectMatcher"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WireMock.Matchers.ExactObjectMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ExactObjectMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:WireMock.Matchers.ExactObjectMatcher.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ExactObjectMatcher"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WireMock.Matchers.ExactObjectMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ExactObjectMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="throwException">Throw an exception when the internal matching fails because of invalid input.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:WireMock.Matchers.ExactObjectMatcher.IsMatch(System.Object)">
            <inheritdoc cref="M:WireMock.Matchers.IObjectMatcher.IsMatch(System.Object)"/>
        </member>
        <member name="P:WireMock.Matchers.ExactObjectMatcher.Name">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.Name"/>
        </member>
        <member name="T:WireMock.Matchers.ICSharpCodeMatcher">
            <summary>
            CSharpCode / CS-Script Matcher
            </summary>
            <inheritdoc cref="T:WireMock.Matchers.IObjectMatcher"/>
            <inheritdoc cref="T:WireMock.Matchers.IStringMatcher"/>
        </member>
        <member name="T:WireMock.Matchers.IIgnoreCaseMatcher">
            <summary>
            IIgnoreCaseMatcher
            </summary>
            <inheritdoc cref="T:WireMock.Matchers.IMatcher"/>
        </member>
        <member name="P:WireMock.Matchers.IIgnoreCaseMatcher.IgnoreCase">
            <summary>
            Ignore the case from the pattern.
            </summary>
        </member>
        <member name="T:WireMock.Matchers.IMatcher">
            <summary>
            IMatcher
            </summary>
        </member>
        <member name="P:WireMock.Matchers.IMatcher.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.IMatcher.MatchBehaviour">
            <summary>
            Gets the match behaviour.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.IMatcher.ThrowException">
            <summary>
            Should this matcher throw an exception?
            </summary>
        </member>
        <member name="T:WireMock.Matchers.IObjectMatcher">
            <summary>
            IObjectMatcher
            </summary>
        </member>
        <member name="M:WireMock.Matchers.IObjectMatcher.IsMatch(System.Object)">
            <summary>
            Determines whether the specified input is match.
            </summary>
            <param name="input">The input.</param>
            <returns>A value between 0.0 - 1.0 of the similarity.</returns>
        </member>
        <member name="T:WireMock.Matchers.IStringMatcher">
            <summary>
            IStringMatcher
            </summary>
            <inheritdoc cref="T:WireMock.Matchers.IMatcher"/>
        </member>
        <member name="M:WireMock.Matchers.IStringMatcher.IsMatch(System.String)">
            <summary>
            Determines whether the specified input is match.
            </summary>
            <param name="input">The input.</param>
            <returns>A value between 0.0 - 1.0 of the similarity.</returns>
        </member>
        <member name="M:WireMock.Matchers.IStringMatcher.GetPatterns">
            <summary>
            Gets the patterns.
            </summary>
            <returns>Patterns</returns>
        </member>
        <member name="T:WireMock.Matchers.IValueMatcher">
            <summary>
            IValueMatcher
            </summary>
            <seealso cref="T:WireMock.Matchers.IObjectMatcher" />
        </member>
        <member name="P:WireMock.Matchers.IValueMatcher.Value">
            <summary>
            Gets the value (can be a string or an object).
            </summary>
            <returns>Value</returns>
        </member>
        <member name="T:WireMock.Matchers.JmesPathMatcher">
            <summary>
            http://jmespath.org/
            </summary>
        </member>
        <member name="P:WireMock.Matchers.JmesPathMatcher.MatchBehaviour">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.MatchBehaviour"/>
        </member>
        <member name="P:WireMock.Matchers.JmesPathMatcher.ThrowException">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.ThrowException"/>
        </member>
        <member name="M:WireMock.Matchers.JmesPathMatcher.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.JmesPathMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.JmesPathMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.JmesPathMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.JmesPathMatcher.#ctor(System.Boolean,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.JmesPathMatcher"/> class.
            </summary>
            <param name="throwException">Throw an exception when the internal matching fails because of invalid input.</param>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.JmesPathMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Boolean,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.JmesPathMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="throwException">Throw an exception when the internal matching fails because of invalid input.</param>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.JmesPathMatcher.IsMatch(System.String)">
            <inheritdoc cref="M:WireMock.Matchers.IStringMatcher.IsMatch(System.String)"/>
        </member>
        <member name="M:WireMock.Matchers.JmesPathMatcher.IsMatch(System.Object)">
            <inheritdoc cref="M:WireMock.Matchers.IObjectMatcher.IsMatch(System.Object)"/>
        </member>
        <member name="M:WireMock.Matchers.JmesPathMatcher.GetPatterns">
            <inheritdoc cref="M:WireMock.Matchers.IStringMatcher.GetPatterns"/>
        </member>
        <member name="P:WireMock.Matchers.JmesPathMatcher.Name">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.Name"/>
        </member>
        <member name="T:WireMock.Matchers.JsonMatcher">
            <summary>
            JsonMatcher
            </summary>
        </member>
        <member name="P:WireMock.Matchers.JsonMatcher.Value">
            <inheritdoc cref="P:WireMock.Matchers.IValueMatcher.Value"/>
        </member>
        <member name="P:WireMock.Matchers.JsonMatcher.Name">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.Name"/>
        </member>
        <member name="P:WireMock.Matchers.JsonMatcher.MatchBehaviour">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.MatchBehaviour"/>
        </member>
        <member name="P:WireMock.Matchers.JsonMatcher.IgnoreCase">
            <inheritdoc cref="P:WireMock.Matchers.IIgnoreCaseMatcher.IgnoreCase"/>
        </member>
        <member name="P:WireMock.Matchers.JsonMatcher.ThrowException">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.ThrowException"/>
        </member>
        <member name="M:WireMock.Matchers.JsonMatcher.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.JsonMatcher"/> class.
            </summary>
            <param name="value">The string value to check for equality.</param>
            <param name="ignoreCase">Ignore the case from the PropertyName and PropertyValue (string only).</param>
            <param name="throwException">Throw an exception when the internal matching fails because of invalid input.</param>
        </member>
        <member name="M:WireMock.Matchers.JsonMatcher.#ctor(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.JsonMatcher"/> class.
            </summary>
            <param name="value">The object value to check for equality.</param>
            <param name="ignoreCase">Ignore the case from the PropertyName and PropertyValue (string only).</param>
            <param name="throwException">Throw an exception when the internal matching fails because of invalid input.</param>
        </member>
        <member name="M:WireMock.Matchers.JsonMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.JsonMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="value">The value to check for equality.</param>
            <param name="ignoreCase">Ignore the case from the PropertyName and PropertyValue (string only).</param>
            <param name="throwException">Throw an exception when the internal matching fails because of invalid input.</param>
        </member>
        <member name="M:WireMock.Matchers.JsonMatcher.IsMatch(System.Object)">
            <inheritdoc cref="M:WireMock.Matchers.IObjectMatcher.IsMatch(System.Object)"/>
        </member>
        <member name="M:WireMock.Matchers.JsonMatcher.IsMatch(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Compares the input against the matcher value
            </summary>
            <param name="value">Matcher value</param>
            <param name="input">Input value</param>
            <returns></returns>
        </member>
        <member name="T:WireMock.Matchers.JsonPartialMatcher">
            <summary>
            JsonPartialMatcher
            </summary>
        </member>
        <member name="P:WireMock.Matchers.JsonPartialMatcher.Name">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JsonPartialMatcher.#ctor(System.String,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JsonPartialMatcher.#ctor(System.Object,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JsonPartialMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Object,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JsonPartialMatcher.IsMatch(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.JsonPartialWildcardMatcher">
            <summary>
            JsonPartialWildCardMatcher
            </summary>
        </member>
        <member name="P:WireMock.Matchers.JsonPartialWildcardMatcher.Name">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JsonPartialWildcardMatcher.#ctor(System.String,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JsonPartialWildcardMatcher.#ctor(System.Object,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JsonPartialWildcardMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Object,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Matchers.JsonPartialWildcardMatcher.IsMatch(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.JsonPathMatcher">
            <summary>
            JsonPathMatcher
            </summary>
            <seealso cref="T:WireMock.Matchers.IMatcher" />
            <seealso cref="T:WireMock.Matchers.IObjectMatcher" />
        </member>
        <member name="P:WireMock.Matchers.JsonPathMatcher.MatchBehaviour">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.MatchBehaviour"/>
        </member>
        <member name="P:WireMock.Matchers.JsonPathMatcher.ThrowException">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.ThrowException"/>
        </member>
        <member name="M:WireMock.Matchers.JsonPathMatcher.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.JsonPathMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.JsonPathMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.JsonPathMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.JsonPathMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Boolean,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.JsonPathMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="throwException">Throw an exception when the internal matching fails because of invalid input.</param>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.JsonPathMatcher.IsMatch(System.String)">
            <inheritdoc cref="M:WireMock.Matchers.IStringMatcher.IsMatch(System.String)"/>
        </member>
        <member name="M:WireMock.Matchers.JsonPathMatcher.IsMatch(System.Object)">
            <inheritdoc cref="M:WireMock.Matchers.IObjectMatcher.IsMatch(System.Object)"/>
        </member>
        <member name="M:WireMock.Matchers.JsonPathMatcher.GetPatterns">
            <inheritdoc cref="M:WireMock.Matchers.IStringMatcher.GetPatterns"/>
        </member>
        <member name="P:WireMock.Matchers.JsonPathMatcher.Name">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.Name"/>
        </member>
        <member name="T:WireMock.Matchers.LinqMatcher">
            <summary>
            System.Linq.Dynamic.Core Expression Matcher
            </summary>
            <inheritdoc cref="T:WireMock.Matchers.IObjectMatcher"/>
            <inheritdoc cref="T:WireMock.Matchers.IStringMatcher"/>
        </member>
        <member name="P:WireMock.Matchers.LinqMatcher.MatchBehaviour">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.MatchBehaviour"/>
        </member>
        <member name="P:WireMock.Matchers.LinqMatcher.ThrowException">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.ThrowException"/>
        </member>
        <member name="M:WireMock.Matchers.LinqMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.LinqMatcher"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:WireMock.Matchers.LinqMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.LinqMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.LinqMatcher.#ctor(WireMock.Matchers.MatchBehaviour,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.LinqMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:WireMock.Matchers.LinqMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Boolean,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.LinqMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="patterns">The patterns.</param>
            <param name="throwException">Throw an exception when the internal matching fails because of invalid input.</param>
        </member>
        <member name="M:WireMock.Matchers.LinqMatcher.IsMatch(System.String)">
            <inheritdoc cref="M:WireMock.Matchers.IStringMatcher.IsMatch(System.String)"/>
        </member>
        <member name="M:WireMock.Matchers.LinqMatcher.IsMatch(System.Object)">
            <inheritdoc cref="M:WireMock.Matchers.IObjectMatcher.IsMatch(System.Object)"/>
        </member>
        <member name="M:WireMock.Matchers.LinqMatcher.GetPatterns">
            <inheritdoc cref="M:WireMock.Matchers.IStringMatcher.GetPatterns"/>
        </member>
        <member name="P:WireMock.Matchers.LinqMatcher.Name">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.Name"/>
        </member>
        <member name="T:WireMock.Matchers.MatchBehaviour">
            <summary>
            MatchBehaviour
            </summary>
        </member>
        <member name="F:WireMock.Matchers.MatchBehaviour.AcceptOnMatch">
            <summary>
            Accept on match (default)
            </summary>
        </member>
        <member name="F:WireMock.Matchers.MatchBehaviour.RejectOnMatch">
            <summary>
            Reject on match
            </summary>
        </member>
        <member name="M:WireMock.Matchers.MatchBehaviourHelper.Convert(WireMock.Matchers.MatchBehaviour,System.Double)">
            <summary>
            Converts the specified match behaviour and match value to a new match value.
            
            if AcceptOnMatch --> return match (default)
            if RejectOnMatch and match = 0.0 --> return 1.0
            if RejectOnMatch and match = 0.? --> return 0.0
            if RejectOnMatch and match = 1.0 --> return 0.0
            </summary>
            
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="match">The match.</param>
            <returns>match value</returns>
        </member>
        <member name="T:WireMock.Matchers.MatchScores">
            <summary>
            MatchScores
            </summary>
        </member>
        <member name="F:WireMock.Matchers.MatchScores.Tolerance">
            <summary>
            The tolerance
            </summary>
        </member>
        <member name="F:WireMock.Matchers.MatchScores.Mismatch">
            <summary>
            The default mismatch score
            </summary>
        </member>
        <member name="F:WireMock.Matchers.MatchScores.Perfect">
            <summary>
            The default perfect match score
            </summary>
        </member>
        <member name="F:WireMock.Matchers.MatchScores.AlmostPerfect">
            <summary>
            The almost perfect match score
            </summary>
        </member>
        <member name="M:WireMock.Matchers.MatchScores.IsPerfect(System.Double)">
            <summary>
            Is the value a perfect match?
            </summary>
            <param name="value">The value.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:WireMock.Matchers.MatchScores.ToScore(System.Boolean)">
            <summary>
            Convert a bool to the score.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns>score</returns>
        </member>
        <member name="M:WireMock.Matchers.MatchScores.ToScore(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Calculates the score from multiple values.
            </summary>
            <param name="values">The values.</param>
            <returns>average score</returns>
        </member>
        <member name="M:WireMock.Matchers.MatchScores.ToScore(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the score from multiple values.
            </summary>
            <param name="values">The values.</param>
            <returns>average score</returns>
        </member>
        <member name="T:WireMock.Matchers.NotNullOrEmptyMatcher">
            <summary>
            NotNullOrEmptyMatcher
            </summary>
            <seealso cref="T:WireMock.Matchers.IObjectMatcher" />
        </member>
        <member name="P:WireMock.Matchers.NotNullOrEmptyMatcher.Name">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.Name"/>
        </member>
        <member name="P:WireMock.Matchers.NotNullOrEmptyMatcher.MatchBehaviour">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.MatchBehaviour"/>
        </member>
        <member name="P:WireMock.Matchers.NotNullOrEmptyMatcher.ThrowException">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.ThrowException"/>
        </member>
        <member name="M:WireMock.Matchers.NotNullOrEmptyMatcher.#ctor(WireMock.Matchers.MatchBehaviour)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.NotNullOrEmptyMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
        </member>
        <member name="M:WireMock.Matchers.NotNullOrEmptyMatcher.IsMatch(System.Object)">
            <inheritdoc cref="M:WireMock.Matchers.IObjectMatcher.IsMatch(System.Object)"/>
        </member>
        <member name="M:WireMock.Matchers.NotNullOrEmptyMatcher.IsMatch(System.String)">
            <inheritdoc cref="M:WireMock.Matchers.IStringMatcher.IsMatch(System.String)"/>
        </member>
        <member name="M:WireMock.Matchers.NotNullOrEmptyMatcher.GetPatterns">
            <inheritdoc cref="M:WireMock.Matchers.IStringMatcher.GetPatterns"/>
        </member>
        <member name="T:WireMock.Matchers.RegexMatcher">
            <summary>
            Regular Expression Matcher
            </summary>
            <inheritdoc cref="T:WireMock.Matchers.IStringMatcher"/>
            <inheritdoc cref="T:WireMock.Matchers.IIgnoreCaseMatcher"/>
        </member>
        <member name="P:WireMock.Matchers.RegexMatcher.MatchBehaviour">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.MatchBehaviour"/>
        </member>
        <member name="P:WireMock.Matchers.RegexMatcher.ThrowException">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.ThrowException"/>
        </member>
        <member name="M:WireMock.Matchers.RegexMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.RegexMatcher"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
            <param name="throwException">Throw an exception when the internal matching fails because of invalid input.</param>
            <param name="useRegexExtended">Use RegexExtended (default = true).</param>
        </member>
        <member name="M:WireMock.Matchers.RegexMatcher.#ctor(WireMock.Matchers.MatchBehaviour,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.RegexMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
            <param name="throwException">Throw an exception when the internal matching fails because of invalid input.</param>
            <param name="useRegexExtended">Use RegexExtended (default = true).</param>
        </member>
        <member name="M:WireMock.Matchers.RegexMatcher.#ctor(WireMock.Matchers.MatchBehaviour,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.RegexMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
            <param name="throwException">Throw an exception when the internal matching fails because of invalid input.</param>
            <param name="useRegexExtended">Use RegexExtended (default = true).</param>
        </member>
        <member name="M:WireMock.Matchers.RegexMatcher.IsMatch(System.String)">
            <inheritdoc cref="M:WireMock.Matchers.IStringMatcher.IsMatch(System.String)"/>
        </member>
        <member name="M:WireMock.Matchers.RegexMatcher.GetPatterns">
            <inheritdoc cref="M:WireMock.Matchers.IStringMatcher.GetPatterns"/>
        </member>
        <member name="P:WireMock.Matchers.RegexMatcher.Name">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.Name"/>
        </member>
        <member name="P:WireMock.Matchers.RegexMatcher.IgnoreCase">
            <inheritdoc cref="P:WireMock.Matchers.IIgnoreCaseMatcher.IgnoreCase"/>
        </member>
        <member name="T:WireMock.Matchers.Request.CompositeMatcherType">
            <summary>
            CompositeMatcherType
            </summary>
        </member>
        <member name="F:WireMock.Matchers.Request.CompositeMatcherType.And">
            <summary>
            And
            </summary>
        </member>
        <member name="F:WireMock.Matchers.Request.CompositeMatcherType.Or">
            <summary>
            Or
            </summary>
        </member>
        <member name="T:WireMock.Matchers.Request.IRequestMatcher">
            <summary>
            The RequestMatcher interface.
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.IRequestMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <summary>
            Determines whether the specified RequestMessage is match.
            </summary>
            <param name="requestMessage">The RequestMessage.</param>
            <param name="requestMatchResult">The RequestMatchResult.</param>
            <returns>
            A value between 0.0 - 1.0 of the similarity.
            </returns>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMatchResult">
            <summary>
            RequestMatchResult
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMatchResult.TotalScore">
            <inheritdoc cref="P:WireMock.Matchers.Request.IRequestMatchResult.TotalScore" />
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMatchResult.TotalNumber">
            <inheritdoc cref="P:WireMock.Matchers.Request.IRequestMatchResult.TotalNumber" />
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMatchResult.IsPerfectMatch">
            <inheritdoc cref="P:WireMock.Matchers.Request.IRequestMatchResult.IsPerfectMatch" />
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMatchResult.AverageTotalScore">
            <inheritdoc cref="P:WireMock.Matchers.Request.IRequestMatchResult.AverageTotalScore" />
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMatchResult.MatchDetails">
            <inheritdoc cref="P:WireMock.Matchers.Request.IRequestMatchResult.MatchDetails" />
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMatchResult.AddScore(System.Type,System.Double)">
            <summary>
            Adds the score.
            </summary>
            <param name="matcherType">The matcher Type.</param>
            <param name="score">The score.</param>
            <returns>The score.</returns>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMatchResult.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order.
            </returns>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageBodyMatcher">
            <summary>
            The request body matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageBodyMatcher.Func">
            <summary>
            The body function
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageBodyMatcher.DataFunc">
            <summary>
            The body data function for byte[]
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageBodyMatcher.JsonFunc">
            <summary>
            The body data function for json
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageBodyMatcher.BodyDataFunc">
            <summary>
            The body data function for BodyData
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageBodyMatcher.Matchers">
            <summary>
            The matchers.
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="body">The body.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="body">The body.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="body">The body.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(System.Func{System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="func">The function.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(System.Func{System.Byte[],System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="func">The function.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="func">The function.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(System.Func{WireMock.Util.IBodyData,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="func">The function.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(WireMock.Matchers.IMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="matchers">The matchers.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <see cref="M:WireMock.Matchers.Request.IRequestMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.RequestMatchResult)"/>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageClientIPMatcher">
            <summary>
            The request ClientIP matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageClientIPMatcher.Matchers">
            <summary>
            The matchers.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageClientIPMatcher.Funcs">
            <summary>
            The ClientIP functions.
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageClientIPMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageClientIPMatcher"/> class.
            </summary>
            <param name="clientIPs">The clientIPs.</param>
            <param name="matchBehaviour">The match behaviour.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageClientIPMatcher.#ctor(WireMock.Matchers.IStringMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageClientIPMatcher"/> class.
            </summary>
            <param name="matchers">The matchers.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageClientIPMatcher.#ctor(System.Func{System.String,System.Boolean}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageClientIPMatcher"/> class.
            </summary>
            <param name="funcs">The clientIP functions.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageClientIPMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <inheritdoc cref="M:WireMock.Matchers.Request.IRequestMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.RequestMatchResult)"/>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageCompositeMatcher">
            <summary>
            The composite request matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageCompositeMatcher.RequestMatchers">
            <summary>
            Gets the request matchers.
            </summary>
            <value>
            The request matchers.
            </value>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageCompositeMatcher.#ctor(System.Collections.Generic.IEnumerable{WireMock.Matchers.Request.IRequestMatcher},WireMock.Matchers.Request.CompositeMatcherType)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageCompositeMatcher"/> class.
            </summary>
            <param name="requestMatchers">The request matchers.</param>
            <param name="type">The CompositeMatcherType type (Defaults to 'And')</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageCompositeMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <inheritdoc cref="M:WireMock.Matchers.Request.IRequestMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.RequestMatchResult)"/>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageCookieMatcher">
            <summary>
            The request cookie matcher.
            </summary>
            <inheritdoc cref="T:WireMock.Matchers.Request.IRequestMatcher"/>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageCookieMatcher.Funcs">
            <summary>
            The functions
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageCookieMatcher.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageCookieMatcher.Matchers">
            <value>
            The matchers.
            </value>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageCookieMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageCookieMatcher"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
            <param name="matchBehaviour">The match behaviour.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageCookieMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String,System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageCookieMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="name">The name.</param>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageCookieMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageCookieMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="name">The name.</param>
            <param name="matchers">The matchers.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageCookieMatcher.#ctor(System.Func{System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageCookieMatcher"/> class.
            </summary>
            <param name="funcs">The funcs.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageCookieMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <inheritdoc cref="M:WireMock.Matchers.Request.IRequestMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.RequestMatchResult)"/>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageHeaderMatcher">
            <summary>
            The request header matcher.
            </summary>
            <inheritdoc cref="T:WireMock.Matchers.Request.IRequestMatcher"/>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageHeaderMatcher.Funcs">
            <summary>
            The functions
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageHeaderMatcher.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageHeaderMatcher.Matchers">
            <value>
            The matchers.
            </value>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageHeaderMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageHeaderMatcher"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
            <param name="matchBehaviour">The match behaviour.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageHeaderMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String,System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageHeaderMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="name">The name.</param>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageHeaderMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageHeaderMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="name">The name.</param>
            <param name="matchers">The matchers.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageHeaderMatcher.#ctor(System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Boolean}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageHeaderMatcher"/> class.
            </summary>
            <param name="funcs">The funcs.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageHeaderMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <inheritdoc cref="M:WireMock.Matchers.Request.IRequestMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.RequestMatchResult)"/>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageMethodMatcher">
            <summary>
            The request verb matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageMethodMatcher.Methods">
            <summary>
            The methods
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageMethodMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageMethodMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="methods">The methods.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageMethodMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <inheritdoc cref="M:WireMock.Matchers.Request.IRequestMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.RequestMatchResult)"/>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageParamMatcher">
            <summary>
            The request parameters matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageParamMatcher.Funcs">
            <summary>
            The funcs
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageParamMatcher.Key">
            <summary>
            The key
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageParamMatcher.IgnoreCase">
            <summary>
            Defines if the key should be matched using case-ignore.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageParamMatcher.Matchers">
            <summary>
            The matchers.
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageParamMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageParamMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="key">The key.</param>
            <param name="ignoreCase">Defines if the key should be matched using case-ignore.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageParamMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String,System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageParamMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="key">The key.</param>
            <param name="ignoreCase">Defines if the key should be matched using case-ignore.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageParamMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageParamMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="key">The key.</param>
            <param name="ignoreCase">Defines if the key should be matched using case-ignore.</param>
            <param name="matchers">The matchers.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageParamMatcher.#ctor(System.Func{System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}},System.Boolean}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageParamMatcher"/> class.
            </summary>
            <param name="funcs">The funcs.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageParamMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <inheritdoc cref="M:WireMock.Matchers.Request.IRequestMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.RequestMatchResult)"/>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessagePathMatcher">
            <summary>
            The request path matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessagePathMatcher.Matchers">
            <summary>
            The matchers
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessagePathMatcher.Funcs">
            <summary>
            The path functions
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessagePathMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessagePathMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="paths">The paths.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessagePathMatcher.#ctor(WireMock.Matchers.IStringMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessagePathMatcher"/> class.
            </summary>
            <param name="matchers">The matchers.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessagePathMatcher.#ctor(System.Func{System.String,System.Boolean}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessagePathMatcher"/> class.
            </summary>
            <param name="funcs">The path functions.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessagePathMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <inheritdoc cref="M:WireMock.Matchers.Request.IRequestMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.RequestMatchResult)"/>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageScenarioAndStateMatcher">
            <summary>
            The scenario and state matcher.
            </summary>
        </member>
        <member name="F:WireMock.Matchers.Request.RequestMessageScenarioAndStateMatcher._executionConditionState">
            <summary>
            Execution state condition for the current mapping.
            </summary>
        </member>
        <member name="F:WireMock.Matchers.Request.RequestMessageScenarioAndStateMatcher._nextState">
            <summary>
            The next state which will be signaled after the current mapping execution.
            In case the value is null state will not be changed.
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageScenarioAndStateMatcher.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageScenarioAndStateMatcher"/> class.
            </summary>
            <param name="nextState">The next state.</param>
            <param name="executionConditionState">Execution state condition for the current mapping.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageScenarioAndStateMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageUrlMatcher">
            <summary>
            The request url matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageUrlMatcher.Matchers">
            <summary>
            The matchers.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageUrlMatcher.Funcs">
            <summary>
            The url functions.
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageUrlMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageUrlMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="urls">The urls.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageUrlMatcher.#ctor(WireMock.Matchers.IStringMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageUrlMatcher"/> class.
            </summary>
            <param name="matchers">The matchers.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageUrlMatcher.#ctor(System.Func{System.String,System.Boolean}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageUrlMatcher"/> class.
            </summary>
            <param name="funcs">The url functions.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageUrlMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <inheritdoc cref="M:WireMock.Matchers.Request.IRequestMatcher.GetMatchingScore(WireMock.IRequestMessage,WireMock.Matchers.Request.RequestMatchResult)"/>
        </member>
        <member name="T:WireMock.Matchers.SimMetricsMatcher">
            <summary>
            SimMetricsMatcher
            </summary>
            <seealso cref="T:WireMock.Matchers.IStringMatcher" />
        </member>
        <member name="P:WireMock.Matchers.SimMetricsMatcher.MatchBehaviour">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.MatchBehaviour"/>
        </member>
        <member name="P:WireMock.Matchers.SimMetricsMatcher.ThrowException">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.ThrowException"/>
        </member>
        <member name="M:WireMock.Matchers.SimMetricsMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern},SimMetrics.Net.SimMetricType)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.SimMetricsMatcher"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="simMetricType">The SimMetric Type</param>
        </member>
        <member name="M:WireMock.Matchers.SimMetricsMatcher.#ctor(WireMock.Matchers.MatchBehaviour,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern},SimMetrics.Net.SimMetricType)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.SimMetricsMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="pattern">The pattern.</param>
            <param name="simMetricType">The SimMetric Type</param>
        </member>
        <member name="M:WireMock.Matchers.SimMetricsMatcher.#ctor(System.String[],SimMetrics.Net.SimMetricType)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.SimMetricsMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
            <param name="simMetricType">The SimMetric Type</param>
        </member>
        <member name="M:WireMock.Matchers.SimMetricsMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[],SimMetrics.Net.SimMetricType)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.SimMetricsMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
            <param name="simMetricType">The SimMetric Type</param>
        </member>
        <member name="M:WireMock.Matchers.SimMetricsMatcher.#ctor(WireMock.Matchers.MatchBehaviour,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[],SimMetrics.Net.SimMetricType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.SimMetricsMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="patterns">The patterns.</param>
            <param name="simMetricType">The SimMetric Type</param>
            <param name="throwException">Throw an exception when the internal matching fails because of invalid input.</param>
        </member>
        <member name="M:WireMock.Matchers.SimMetricsMatcher.IsMatch(System.String)">
            <inheritdoc cref="M:WireMock.Matchers.IStringMatcher.IsMatch(System.String)"/>
        </member>
        <member name="M:WireMock.Matchers.SimMetricsMatcher.GetPatterns">
            <inheritdoc cref="M:WireMock.Matchers.IStringMatcher.GetPatterns"/>
        </member>
        <member name="P:WireMock.Matchers.SimMetricsMatcher.Name">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.Name"/>
        </member>
        <member name="T:WireMock.Matchers.WildcardMatcher">
            <summary>
            WildcardMatcher
            </summary>
            <seealso cref="T:WireMock.Matchers.RegexMatcher" />
        </member>
        <member name="M:WireMock.Matchers.WildcardMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.WildcardMatcher"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">IgnoreCase</param>
        </member>
        <member name="M:WireMock.Matchers.WildcardMatcher.#ctor(WireMock.Matchers.MatchBehaviour,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.WildcardMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">IgnoreCase</param>
        </member>
        <member name="M:WireMock.Matchers.WildcardMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.WildcardMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">IgnoreCase</param>
        </member>
        <member name="M:WireMock.Matchers.WildcardMatcher.#ctor(WireMock.Matchers.MatchBehaviour,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[],System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.WildcardMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">IgnoreCase</param>
            <param name="throwException">Throw an exception when the internal matching fails because of invalid input.</param>
        </member>
        <member name="M:WireMock.Matchers.WildcardMatcher.GetPatterns">
            <inheritdoc cref="M:WireMock.Matchers.IStringMatcher.GetPatterns"/>
        </member>
        <member name="P:WireMock.Matchers.WildcardMatcher.Name">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.Name"/>
        </member>
        <member name="T:WireMock.Matchers.XPathMatcher">
            <summary>
            XPath2Matcher
            </summary>
            <seealso cref="T:WireMock.Matchers.IStringMatcher" />
        </member>
        <member name="P:WireMock.Matchers.XPathMatcher.MatchBehaviour">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.MatchBehaviour"/>
        </member>
        <member name="P:WireMock.Matchers.XPathMatcher.ThrowException">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.ThrowException"/>
        </member>
        <member name="M:WireMock.Matchers.XPathMatcher.#ctor(AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.XPathMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.XPathMatcher.#ctor(WireMock.Matchers.MatchBehaviour,System.Boolean,AnyOfTypes.AnyOf{System.String,WireMock.Models.StringPattern}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.XPathMatcher"/> class.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="throwException">Throw an exception when the internal matching fails because of invalid input.</param>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.XPathMatcher.IsMatch(System.String)">
            <inheritdoc cref="M:WireMock.Matchers.IStringMatcher.IsMatch(System.String)"/>
        </member>
        <member name="M:WireMock.Matchers.XPathMatcher.GetPatterns">
            <inheritdoc cref="M:WireMock.Matchers.IStringMatcher.GetPatterns"/>
        </member>
        <member name="P:WireMock.Matchers.XPathMatcher.Name">
            <inheritdoc cref="P:WireMock.Matchers.IMatcher.Name"/>
        </member>
        <member name="T:WireMock.Util.BodyData">
            <summary>
            BodyData
            </summary>
        </member>
        <member name="P:WireMock.Util.BodyData.Encoding">
            <inheritdoc cref="P:WireMock.Util.IBodyData.Encoding" />
        </member>
        <member name="P:WireMock.Util.BodyData.BodyAsString">
            <inheritdoc cref="P:WireMock.Util.IBodyData.BodyAsBytes" />
        </member>
        <member name="P:WireMock.Util.BodyData.BodyAsJson">
            <inheritdoc cref="P:WireMock.Util.IBodyData.BodyAsJson" />
        </member>
        <member name="P:WireMock.Util.BodyData.BodyAsBytes">
            <inheritdoc cref="P:WireMock.Util.IBodyData.BodyAsBytes" />
        </member>
        <member name="P:WireMock.Util.BodyData.BodyAsJsonIndented">
            <inheritdoc cref="P:WireMock.Util.IBodyData.BodyAsJsonIndented" />
        </member>
        <member name="P:WireMock.Util.BodyData.BodyAsFile">
            <inheritdoc cref="P:WireMock.Util.IBodyData.BodyAsFile" />
        </member>
        <member name="P:WireMock.Util.BodyData.BodyAsFileIsCached">
            <inheritdoc cref="P:WireMock.Util.IBodyData.BodyAsFileIsCached" />
        </member>
        <member name="P:WireMock.Util.BodyData.DetectedBodyType">
            <inheritdoc cref="P:WireMock.Util.IBodyData.DetectedBodyType" />
        </member>
        <member name="P:WireMock.Util.BodyData.DetectedBodyTypeFromContentType">
            <inheritdoc cref="P:WireMock.Util.IBodyData.DetectedBodyTypeFromContentType" />
        </member>
        <member name="P:WireMock.Util.BodyData.DetectedCompression">
            <inheritdoc cref="P:WireMock.IRequestMessage.DetectedCompression" />
        </member>
        <member name="T:WireMock.Util.BytesEncodingUtils">
             <summary>
             Based on:
             http://utf8checker.codeplex.com
             https://github.com/0x53A/Mvvm/blob/master/src/Mvvm/src/Utf8Checker.cs
            
             References:
             http://anubis.dkuug.dk/JTC1/SC2/WG2/docs/n1335
             http://www.cl.cam.ac.uk/~mgk25/ucs/ISO-10646-UTF-8.html
             http://www.unicode.org/versions/corrigendum1.html
             http://www.ietf.org/rfc/rfc2279.txt
             </summary>
        </member>
        <member name="M:WireMock.Util.BytesEncodingUtils.TryGetEncoding(System.Byte[],System.Text.Encoding@)">
            <summary>
            Tries the get the Encoding from an array of bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="encoding">The output encoding.</param>
        </member>
        <member name="T:WireMock.Util.ConcurrentObservableCollection`1">
            <summary>
            A special Collection that overrides methods of <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> to make them thread safe.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <inheritdoc cref="T:System.Collections.ObjectModel.ObservableCollection`1" />
        </member>
        <member name="M:WireMock.Util.ConcurrentObservableCollection`1.#ctor">
            <summary> 
            Initializes a new instance of the <see cref="T:WireMock.Util.ConcurrentObservableCollection`1" /> class. 
            </summary> 
        </member>
        <member name="M:WireMock.Util.ConcurrentObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Util.ConcurrentObservableCollection`1"/> class that contains elements copied from the specified list.
            </summary>
            <param name="list">The list from which the elements are copied.</param>
        </member>
        <member name="M:WireMock.Util.ConcurrentObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Util.ConcurrentObservableCollection`1"/> class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection from which the elements are copied.</param>
        </member>
        <member name="M:WireMock.Util.ConcurrentObservableCollection`1.ClearItems">
            <inheritdoc cref="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems"/>
        </member>
        <member name="M:WireMock.Util.ConcurrentObservableCollection`1.RemoveItem(System.Int32)">
            <inheritdoc cref="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)"/>
        </member>
        <member name="M:WireMock.Util.ConcurrentObservableCollection`1.InsertItem(System.Int32,`0)">
            <inheritdoc cref="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)"/>
        </member>
        <member name="M:WireMock.Util.ConcurrentObservableCollection`1.SetItem(System.Int32,`0)">
            <inheritdoc cref="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)"/>
        </member>
        <member name="M:WireMock.Util.ConcurrentObservableCollection`1.MoveItem(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)"/>
        </member>
        <member name="T:WireMock.Util.DictionaryExtensions">
            <summary>
            Some IDictionary Extensions
            </summary>
        </member>
        <member name="M:WireMock.Util.DictionaryExtensions.Loop``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``0,``1})">
            <summary>
            Loops the dictionary and executes the specified action.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to loop (can be null).</param>
            <param name="action">The action.</param>
        </member>
        <member name="T:WireMock.Util.EnhancedFileSystemWatcher">
            <summary>
            An EnhancedFileSystemWatcher, which can be used to suppress duplicate events that fire on a single change to the file.
            </summary>
            <seealso cref="T:System.IO.FileSystemWatcher" />
        </member>
        <member name="P:WireMock.Util.EnhancedFileSystemWatcher.Interval">
            <summary>
            Interval, in milliseconds, within which events are considered "recent".
            </summary>
        </member>
        <member name="P:WireMock.Util.EnhancedFileSystemWatcher.FilterRecentEvents">
            <summary>
            Allows user to set whether to filter recent events.
            If this is set a false, this class behaves like System.IO.FileSystemWatcher class.
            </summary>
        </member>
        <member name="M:WireMock.Util.EnhancedFileSystemWatcher.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Util.EnhancedFileSystemWatcher"/> class.
            </summary>
            <param name="interval">The interval.</param>
        </member>
        <member name="M:WireMock.Util.EnhancedFileSystemWatcher.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Util.EnhancedFileSystemWatcher"/> class.
            </summary>
            <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
            <param name="interval">The interval.</param>
        </member>
        <member name="M:WireMock.Util.EnhancedFileSystemWatcher.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Util.EnhancedFileSystemWatcher"/> class.
            </summary>
            <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
            <param name="filter">The type of files to watch. For example, "*.txt" watches for changes to all text files.</param>
            <param name="interval">The interval.</param>
        </member>
        <member name="E:WireMock.Util.EnhancedFileSystemWatcher.Changed">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is changed.
            </summary>
        </member>
        <member name="E:WireMock.Util.EnhancedFileSystemWatcher.Created">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is created.
            </summary>
        </member>
        <member name="E:WireMock.Util.EnhancedFileSystemWatcher.Deleted">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is deleted.
            </summary>
        </member>
        <member name="E:WireMock.Util.EnhancedFileSystemWatcher.Renamed">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is renamed.
            </summary>
        </member>
        <member name="M:WireMock.Util.EnhancedFileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
            <summary>
            Raises the <see cref="E:System.IO.FileSystemWatcher.Changed" /> event.
            </summary>
            <param name="e">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:WireMock.Util.EnhancedFileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
            <summary>
            Raises the <see cref="E:System.IO.FileSystemWatcher.Created" /> event.
            </summary>
            <param name="e">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:WireMock.Util.EnhancedFileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
            <summary>
            Raises the <see cref="E:System.IO.FileSystemWatcher.Deleted" /> event.
            </summary>
            <param name="e">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:WireMock.Util.EnhancedFileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
            <summary>
            Raises the <see cref="E:System.IO.FileSystemWatcher.Renamed" /> event.
            </summary>
            <param name="e">A <see cref="T:System.IO.RenamedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:WireMock.Util.EnhancedFileSystemWatcher.InitializeMembers(System.Int32)">
            <summary>
            This Method Initializes the private members.
            Interval is set to its default value of 100 millisecond.
            FilterRecentEvents is set to true, _lastFileEvent dictionary is initialized.
            We subscribe to the base class events.
            </summary>
        </member>
        <member name="M:WireMock.Util.EnhancedFileSystemWatcher.HasAnotherFileEventOccurredRecently(System.String)">
            <summary>
            This method searches the dictionary to find out when the last event occurred 
            for a particular file. If that event occurred within the specified timespan
            it returns true, else false
            </summary>
            <param name="fileName">The filename to be checked</param>
            <returns>True if an event has occurred within the specified interval, False otherwise</returns>
        </member>
        <member name="T:WireMock.Util.HttpStatusRangeParser">
            <summary>
            Based on https://github.com/tmenier/Flurl/blob/129565361e135e639f1d44a35a78aea4302ac6ca/src/Flurl.Http/HttpStatusRangeParser.cs
            </summary>
        </member>
        <member name="M:WireMock.Util.HttpStatusRangeParser.IsMatch(System.String,System.Object)">
            <summary>
            Determines whether the specified pattern is match.
            </summary>
            <param name="pattern">The pattern. (Can be null, in that case it's allowed.)</param>
            <param name="httpStatusCode">The value.</param>
            <exception cref="T:System.ArgumentException"><paramref name="pattern"/> is invalid.</exception>
        </member>
        <member name="M:WireMock.Util.HttpStatusRangeParser.IsMatch(System.String,System.Net.HttpStatusCode)">
            <summary>
            Determines whether the specified pattern is match.
            </summary>
            <param name="pattern">The pattern. (Can be null, in that case it's allowed.)</param>
            <param name="httpStatusCode">The value.</param>
            <exception cref="T:System.ArgumentException"><paramref name="pattern"/> is invalid.</exception>
        </member>
        <member name="M:WireMock.Util.HttpStatusRangeParser.IsMatch(System.String,System.Int32)">
            <summary>
            Determines whether the specified pattern is match.
            </summary>
            <param name="pattern">The pattern. (Can be null, in that case it's allowed.)</param>
            <param name="httpStatusCode">The value.</param>
            <exception cref="T:System.ArgumentException"><paramref name="pattern"/> is invalid.</exception>
        </member>
        <member name="M:WireMock.Util.JsonUtils.Parse(System.String)">
            <summary>
            Load a Newtonsoft.Json.Linq.JObject from a string that contains JSON.
            Using : DateParseHandling = DateParseHandling.None
            </summary>
            <param name="json">A System.String that contains JSON.</param>
            <returns>A Newtonsoft.Json.Linq.JToken populated from the string that contains JSON.</returns>
        </member>
        <member name="M:WireMock.Util.JsonUtils.DeserializeObject(System.String)">
            <summary>
            Deserializes the JSON to a .NET object.
            Using : DateParseHandling = DateParseHandling.None
            </summary>
            <param name="json">A System.String that contains JSON.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:WireMock.Util.JsonUtils.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            Using : DateParseHandling = DateParseHandling.None
            </summary>
            <param name="json">A System.String that contains JSON.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:WireMock.Util.PathUtils.CleanPath(System.String)">
            <summary>
            Robust handling of the user defined path.
            Also supports Unix and Windows platforms
            </summary>
            <param name="path">The path to clean</param>
        </member>
        <member name="M:WireMock.Util.PathUtils.RemoveLeadingDirectorySeparators(System.String)">
            <summary>
            Removes leading directory separator chars from the filepath, which could break Path.Combine
            </summary>
            <param name="path">The path to remove the loading DirectorySeparatorChars</param>
        </member>
        <member name="M:WireMock.Util.PathUtils.Combine(System.String,System.String)">
            <summary>
            Combine two paths
            </summary>
            <param name="root">The root path</param>
            <param name="path">The path</param>
        </member>
        <member name="T:WireMock.Util.PortUtils">
            <summary>
            Port Utility class
            </summary>
        </member>
        <member name="M:WireMock.Util.PortUtils.FindFreeTcpPort">
            <summary>
            Finds a free TCP port.
            </summary>
            <remarks>see http://stackoverflow.com/questions/138043/find-the-next-tcp-port-in-net.</remarks>
        </member>
        <member name="M:WireMock.Util.PortUtils.TryExtract(System.String,System.Boolean@,System.String@,System.String@,System.Int32@)">
            <summary>
            Extract the if-isHttps, protocol, host and port from a URL.
            </summary>
        </member>
        <member name="T:WireMock.Util.QueryStringParser">
            <summary>
            Based on https://stackoverflow.com/questions/659887/get-url-parameters-from-a-string-in-net
            </summary>
        </member>
        <member name="T:WireMock.Models.StringPattern">
            <summary>
            StringPattern which defines the Pattern as a string, and optionally the filepath pattern file.
            </summary>
        </member>
        <member name="P:WireMock.Models.StringPattern.Pattern">
            <summary>
            The pattern as string.
            </summary>
        </member>
        <member name="P:WireMock.Models.StringPattern.PatternAsFile">
            <summary>
            The filepath (optionally)
            </summary>
        </member>
        <member name="T:WireMock.Models.TimeSettings">
            <summary>
            TimeSettingsModel: Start, End and TTL
            </summary>
        </member>
        <member name="P:WireMock.Models.TimeSettings.Start">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Models.TimeSettings.End">
            <inheritdoc />
        </member>
        <member name="P:WireMock.Models.TimeSettings.TTL">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Models.UrlDetails">
            <summary>
            UrlDetails
            </summary>
        </member>
        <member name="P:WireMock.Models.UrlDetails.Url">
            <summary>
            Gets the url (relative).
            </summary>
        </member>
        <member name="P:WireMock.Models.UrlDetails.AbsoluteUrl">
            <summary>
            Gets the AbsoluteUrl.
            </summary>
        </member>
        <member name="M:WireMock.Models.UrlDetails.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Models.UrlDetails"/> class.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:WireMock.Models.UrlDetails.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Models.UrlDetails"/> class.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:WireMock.Models.UrlDetails.#ctor(System.Uri,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Models.UrlDetails"/> class.
            </summary>
            <param name="absoluteUrl">The absolute URL.</param>
            <param name="url">The URL (relative).</param>
        </member>
        <member name="T:WireMock.Models.Webhook">
            <summary>
            Webhook
            </summary>
        </member>
        <member name="P:WireMock.Models.Webhook.Request">
            <inheritdoc cref="P:WireMock.Models.IWebhook.Request"/>
        </member>
        <member name="T:WireMock.Models.WebhookRequest">
            <summary>
            WebhookRequest
            </summary>
        </member>
        <member name="P:WireMock.Models.WebhookRequest.Url">
            <inheritdoc cref="P:WireMock.Models.IWebhookRequest.Url"/>
        </member>
        <member name="P:WireMock.Models.WebhookRequest.Method">
            <inheritdoc cref="P:WireMock.Models.IWebhookRequest.Method"/>
        </member>
        <member name="P:WireMock.Models.WebhookRequest.Headers">
            <inheritdoc cref="P:WireMock.Models.IWebhookRequest.Headers"/>
        </member>
        <member name="P:WireMock.Models.WebhookRequest.BodyData">
            <inheritdoc cref="P:WireMock.Models.IWebhookRequest.BodyData"/>
        </member>
        <member name="P:WireMock.Models.WebhookRequest.UseTransformer">
            <inheritdoc cref="P:WireMock.Models.IWebhookRequest.UseTransformer"/>
        </member>
        <member name="P:WireMock.Models.WebhookRequest.TransformerType">
            <inheritdoc cref="P:WireMock.Models.IWebhookRequest.TransformerType"/>
        </member>
        <member name="P:WireMock.Models.WebhookRequest.TransformerReplaceNodeOptions">
            <inheritdoc cref="P:WireMock.Models.IWebhookRequest.TransformerReplaceNodeOptions"/>
        </member>
        <member name="P:WireMock.Owin.IOwinSelfHost.IsStarted">
            <summary>
            Gets a value indicating whether this server is started.
            </summary>
            <value>
            <c>true</c> if this server is started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WireMock.Owin.IOwinSelfHost.Urls">
            <summary>
            Gets the urls.
            </summary>
        </member>
        <member name="P:WireMock.Owin.IOwinSelfHost.Ports">
            <summary>
            Gets the ports.
            </summary>
        </member>
        <member name="P:WireMock.Owin.IOwinSelfHost.RunningException">
            <summary>
            The exception occurred when the host is running
            </summary>
        </member>
        <member name="T:WireMock.Owin.Mappers.IOwinRequestMapper">
            <summary>
            IOwinRequestMapper
            </summary>
        </member>
        <member name="M:WireMock.Owin.Mappers.IOwinRequestMapper.MapAsync(Microsoft.Owin.IOwinRequest,WireMock.Owin.IWireMockMiddlewareOptions)">
            <summary>
            MapAsync IRequest to RequestMessage
            </summary>
            <param name="request">The OwinRequest/HttpRequest</param>
            <param name="options">The WireMockMiddlewareOptions</param>
            <returns>RequestMessage</returns>
        </member>
        <member name="T:WireMock.Owin.Mappers.IOwinResponseMapper">
            <summary>
            IOwinResponseMapper
            </summary>
        </member>
        <member name="M:WireMock.Owin.Mappers.IOwinResponseMapper.MapAsync(WireMock.ResponseMessage,Microsoft.Owin.IOwinResponse)">
            <summary>
            Map ResponseMessage to IResponse.
            </summary>
            <param name="responseMessage">The ResponseMessage</param>
            <param name="response">The OwinResponse/HttpResponse</param>
        </member>
        <member name="T:WireMock.Owin.Mappers.OwinRequestMapper">
            <summary>
            OwinRequestMapper
            </summary>
        </member>
        <member name="M:WireMock.Owin.Mappers.OwinRequestMapper.MapAsync(Microsoft.Owin.IOwinRequest,WireMock.Owin.IWireMockMiddlewareOptions)">
            <inheritdoc cref="M:WireMock.Owin.Mappers.IOwinRequestMapper.MapAsync(Microsoft.Owin.IOwinRequest,WireMock.Owin.IWireMockMiddlewareOptions)"/>
        </member>
        <member name="T:WireMock.Owin.Mappers.OwinResponseMapper">
            <summary>
            OwinResponseMapper
            </summary>
        </member>
        <member name="M:WireMock.Owin.Mappers.OwinResponseMapper.#ctor(WireMock.Owin.IWireMockMiddlewareOptions)">
            <summary>
            Constructor
            </summary>
            <param name="options">The IWireMockMiddlewareOptions.</param>
        </member>
        <member name="M:WireMock.Owin.Mappers.OwinResponseMapper.MapAsync(WireMock.ResponseMessage,Microsoft.Owin.IOwinResponse)">
            <inheritdoc cref="M:WireMock.Owin.Mappers.IOwinResponseMapper.MapAsync(WireMock.ResponseMessage,Microsoft.Owin.IOwinResponse)"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.FileSystemHandler">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.FileSystemHandler"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.AllowBodyForAllHttpMethods">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.AllowBodyForAllHttpMethods"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.AllowOnlyDefinedHttpStatusCodeInResponse">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.AllowOnlyDefinedHttpStatusCodeInResponse"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.DisableJsonBodyParsing">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.DisableJsonBodyParsing"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.DisableRequestBodyDecompressing">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.DisableRequestBodyDecompressing"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.HandleRequestsSynchronously">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.HandleRequestsSynchronously"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.X509StoreName">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.X509StoreName"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.X509StoreLocation">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.X509StoreLocation"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.X509ThumbprintOrSubjectName">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.X509ThumbprintOrSubjectName"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.X509CertificateFilePath">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.X509CertificateFilePath"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.X509CertificatePassword">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.X509CertificatePassword"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.CustomCertificateDefined">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.CustomCertificateDefined"/>
        </member>
        <member name="P:WireMock.Owin.WireMockMiddlewareOptions.SaveUnmatchedRequests">
            <inheritdoc cref="P:WireMock.Owin.IWireMockMiddlewareOptions.SaveUnmatchedRequests"/>
        </member>
        <member name="T:WireMock.RegularExpressions.RegexExtended">
            <summary>
            Extension to the <see cref="T:System.Text.RegularExpressions.Regex"/> object, adding support for GUID tokens for matching on.
            </summary>
        </member>
        <member name="M:WireMock.RegularExpressions.RegexExtended.#ctor(System.String)">
            <inheritdoc cref="T:System.Text.RegularExpressions.Regex"/>
        </member>
        <member name="M:WireMock.RegularExpressions.RegexExtended.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <inheritdoc cref="T:System.Text.RegularExpressions.Regex"/>
        </member>
        <member name="M:WireMock.RegularExpressions.RegexExtended.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <inheritdoc cref="T:System.Text.RegularExpressions.Regex"/>
        </member>
        <member name="M:WireMock.RegularExpressions.RegexExtended.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="T:System.Text.RegularExpressions.Regex"/>
        </member>
        <member name="M:WireMock.RegularExpressions.RegexExtended.ReplaceGuidPattern(System.String)">
            <summary>
            Replaces all instances of valid GUID tokens with the correct regular expression to match.
            </summary>
            <param name="pattern">Pattern to replace token for.</param>
        </member>
        <member name="T:WireMock.RequestBuilders.IBodyRequestBuilder">
            <summary>
            The BodyRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(WireMock.Matchers.IMatcher)">
            <summary>
            WithBody: IMatcher
            </summary>
            <param name="matcher">The matcher.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(WireMock.Matchers.IMatcher[])">
            <summary>
            WithBody: IMatcher[]
            </summary>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.String,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithBody: Body as string
            </summary>
            <param name="body">The body.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Byte[],WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithBody: Body as byte[]
            </summary>
            <param name="body">The body.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Object,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithBody: Body as object
            </summary>
            <param name="body">The body.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Func{System.String,System.Boolean})">
            <summary>
            WithBody: func (string)
            </summary>
            <param name="func">The function.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Func{System.Byte[],System.Boolean})">
            <summary>
            WithBody: func (byte[])
            </summary>
            <param name="func">The function.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Func{System.Object,System.Boolean})">
            <summary>
            WithBody: func (json object)
            </summary>
            <param name="func">The function.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Func{WireMock.Util.IBodyData,System.Boolean})">
            <summary>
            WithBody: func (BodyData object)
            </summary>
            <param name="func">The function.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.IClientIPRequestBuilder">
            <summary>
            The IClientIPRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IClientIPRequestBuilder.WithClientIP(WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithClientIP: add matching on ClientIP matchers.
            </summary>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IClientIPRequestBuilder.WithClientIP(System.String[])">
            <summary>
            WithClientIP: add matching on clientIPs.
            </summary>
            <param name="clientIPs">The clientIPs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IClientIPRequestBuilder.WithClientIP(WireMock.Matchers.MatchBehaviour,System.String[])">
            <summary>
            WithClientIP: add matching on clientIPs and matchBehaviour.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="clientIPs">The clientIPs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IClientIPRequestBuilder.WithClientIP(System.Func{System.String,System.Boolean}[])">
            <summary>
            WithClientIP: add matching on ClientIP funcs.
            </summary>
            <param name="funcs">The path funcs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.ICookiesRequestBuilder">
            <summary>
            The CookieRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.String,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithCookie: matching based on name, pattern and matchBehaviour.
            </summary>
            <param name="name">The name.</param>
            <param name="pattern">The pattern.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.String,System.Boolean,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithCookie: matching based on name, pattern, ignoreCase and matchBehaviour.
            </summary>
            <param name="name">The name.</param>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.String[],WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithCookie: matching based on name, patterns and matchBehaviour.
            </summary>
            <param name="name">The name.</param>
            <param name="patterns">The patterns.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.String[],System.Boolean,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithCookie: matching based on name, patterns, ignoreCase and matchBehaviour.
            </summary>
            <param name="name">The name.</param>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithCookie: matching based on name and IStringMatcher[].
            </summary>
            <param name="name">The name.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithCookie: matching based on name, ignoreCase and IStringMatcher[].
            </summary>
            <param name="name">The name.</param>
            <param name="ignoreCase">Ignore the case from the cookie-keys.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.Boolean,WireMock.Matchers.MatchBehaviour,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithCookie: matching based on name, ignoreCase, matchBehaviour and IStringMatcher[].
            </summary>
            <param name="name">The name.</param>
            <param name="ignoreCase">Ignore the case from the cookie-keys.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.Func{System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean}[])">
            <summary>
            WithCookie: matching based on functions.
            </summary>
            <param name="funcs">The cookies funcs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.IHeadersRequestBuilder">
            <summary>
            The HeadersRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,System.String,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithHeader: matching based on name, pattern and matchBehaviour.
            </summary>
            <param name="name">The name.</param>
            <param name="pattern">The pattern.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,System.String,System.Boolean,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithHeader: matching based on name, pattern, ignoreCase and matchBehaviour.
            </summary>
            <param name="name">The name.</param>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,System.String[],WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithHeader: matching based on name, patterns and matchBehaviour.
            </summary>
            <param name="name">The name.</param>
            <param name="patterns">The patterns.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,System.String[],System.Boolean,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithHeader: matching based on name, patterns, ignoreCase and matchBehaviour.
            </summary>
            <param name="name">The name.</param>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">Ignore the case from the pattern.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithHeader: matching based on name and IStringMatcher[].
            </summary>
            <param name="name">The name.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithHeader: matching based on name, ignoreCase and IStringMatcher[].
            </summary>
            <param name="name">The name.</param>
            <param name="ignoreCase">Ignore the case from the header-keys.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,System.Boolean,WireMock.Matchers.MatchBehaviour,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithHeader: matching based on name, ignoreCase, matchBehaviour and IStringMatcher[].
            </summary>
            <param name="name">The name.</param>
            <param name="ignoreCase">Ignore the case from the header-keys.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Boolean}[])">
            <summary>
            WithHeader: matching based on functions.
            </summary>
            <param name="funcs">The headers funcs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.IMethodRequestBuilder">
            <summary>
            The MethodRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingConnect(WireMock.Matchers.MatchBehaviour)">
            <summary>
            UsingConnect: add HTTP Method matching on `CONNECT` and matchBehaviour (optional).
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingDelete(WireMock.Matchers.MatchBehaviour)">
            <summary>
            UsingDelete: add HTTP Method matching on `DELETE` and matchBehaviour (optional).
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingGet(WireMock.Matchers.MatchBehaviour)">
            <summary>
            UsingGet: add HTTP Method matching on `GET` and matchBehaviour (optional).
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingHead(WireMock.Matchers.MatchBehaviour)">
            <summary>
            UsingHead: Add HTTP Method matching on `HEAD` and matchBehaviour (optional).
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingPost(WireMock.Matchers.MatchBehaviour)">
            <summary>
            UsingPost: add HTTP Method matching on `POST` and matchBehaviour (optional).
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingPatch(WireMock.Matchers.MatchBehaviour)">
            <summary>
            UsingPatch: add HTTP Method matching on `PATCH` and matchBehaviour (optional).
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingOptions(WireMock.Matchers.MatchBehaviour)">
            <summary>
            UsingPut: add HTTP Method matching on `OPTIONS` and matchBehaviour (optional).
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingPut(WireMock.Matchers.MatchBehaviour)">
            <summary>
            UsingPut: add HTTP Method matching on `PUT` and matchBehaviour (optional).
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingTrace(WireMock.Matchers.MatchBehaviour)">
            <summary>
            UsingTrace: add HTTP Method matching on `TRACE` and matchBehaviour (optional).
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingAnyMethod">
            <summary>
            UsingAnyMethod: add HTTP Method matching on any method.
            </summary>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingAnyVerb">
            <summary>
            UsingAnyVerb: add HTTP Method matching on any method.
            </summary>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingMethod(WireMock.Matchers.MatchBehaviour,System.String[])">
            <summary>
            UsingMethod: add HTTP Method matching on any methods and matchBehaviour.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="methods">The method or methods.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingMethod(System.String[])">
            <summary>
            UsingMethod: add HTTP Method matching on any methods.
            </summary>
            <param name="methods">The method or methods.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingVerb(System.String[])">
            <summary>
            UsingVerb: add HTTP Method matching on any methods.
            </summary>
            <param name="verbs">The method or methods.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.IParamsRequestBuilder">
            <summary>
            The ParamsRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithParam: matching on key only.
            </summary>
            <param name="key">The key.</param>
            <param name="matchBehaviour">The match behaviour (optional).</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,System.Boolean,WireMock.Matchers.MatchBehaviour)">
            <summary>
            WithParam: matching on key only.
            </summary>
            <param name="key">The key.</param>
            <param name="ignoreCase">Defines if the key should be matched using case-ignore.</param>
            <param name="matchBehaviour">The match behaviour (optional).</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,System.String[])">
            <summary>
            WithParam: matching on key and values.
            </summary>
            <param name="key">The key.</param>
            <param name="values">The values.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,System.Boolean,System.String[])">
            <summary>
            WithParam: matching on key and values.
            </summary>
            <param name="key">The key.</param>
            <param name="ignoreCase">Defines if the key should be matched using case-ignore.</param>
            <param name="values">The values.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithParam: matching on key and matchers.
            </summary>
            <param name="key">The key.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithParam: matching on key and matchers.
            </summary>
            <param name="key">The key.</param>
            <param name="ignoreCase">Defines if the key should be matched using case-ignore.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.MatchBehaviour,System.String[])">
            <summary>
            WithParam: matching on key, values and matchBehaviour.
            </summary>
            <param name="key">The key.</param>
            <param name="values">The values.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.MatchBehaviour,System.Boolean,System.String[])">
            <summary>
            WithParam: matching on key, values and matchBehaviour.
            </summary>
            <param name="key">The key.</param>
            <param name="ignoreCase">Defines if the key should be matched using case-ignore.</param>
            <param name="values">The values.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.MatchBehaviour,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithParam: matching on key, matchers and matchBehaviour.
            </summary>
            <param name="key">The key.</param>
            <param name="matchers">The matchers.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.MatchBehaviour,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithParam: matching on key, matchers and matchBehaviour.
            </summary>
            <param name="key">The key.</param>
            <param name="ignoreCase">Defines if the key should be matched using case-ignore.</param>
            <param name="matchers">The matchers.</param>
            <param name="matchBehaviour">The match behaviour.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.Func{System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}},System.Boolean}[])">
            <summary>
            WithParam: matching on functions.
            </summary>
            <param name="funcs">The funcs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.IRequestBuilder">
            <summary>
            IRequestBuilder
            </summary>
        </member>
        <member name="T:WireMock.RequestBuilders.IUrlAndPathRequestBuilder">
            <summary>
            IUrlAndPathRequestBuilder
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithPath(WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithPath: add path matching based on IStringMatchers.
            </summary>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithPath(System.String[])">
            <summary>
            WithPath: add path matching based on paths.
            </summary>
            <param name="paths">The paths.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithPath(WireMock.Matchers.MatchBehaviour,System.String[])">
            <summary>
            WithPath: add path matching based on paths and matchBehaviour.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="paths">The paths.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithPath(System.Func{System.String,System.Boolean}[])">
            <summary>
            WithPath: add path matching based on functions.
            </summary>
            <param name="funcs">The path funcs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithUrl(WireMock.Matchers.IStringMatcher[])">
            <summary>
            WithUrl: add url matching based on IStringMatcher[].
            </summary>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithUrl(System.String[])">
            <summary>
            WithUrl: add url matching based on urls.
            </summary>
            <param name="urls">The urls.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithUrl(WireMock.Matchers.MatchBehaviour,System.String[])">
            <summary>
            WithUrl: add url matching based on urls.
            </summary>
            <param name="matchBehaviour">The match behaviour.</param>
            <param name="urls">The urls.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithUrl(System.Func{System.String,System.Boolean}[])">
            <summary>
            WithUrl: add url matching based on functions.
            </summary>
            <param name="funcs">The url functions.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.Request">
            <summary>
            The requests.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.#ctor(System.Collections.Generic.IList{WireMock.Matchers.Request.IRequestMatcher})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.RequestBuilders.Request"/> class.
            </summary>
            <param name="requestMatchers">The request matchers.</param>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.GetRequestMessageMatchers``1">
            <summary>
            Gets the request message matchers.
            </summary>
            <typeparam name="T">Type of IRequestMatcher</typeparam>
            <returns>A List{T}</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.GetRequestMessageMatcher``1">
            <summary>
            Gets the request message matcher.
            </summary>
            <typeparam name="T">Type of IRequestMatcher</typeparam>
            <returns>A RequestMatcher</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.GetRequestMessageMatcher``1(System.Func{``0,System.Boolean})">
            <summary>
            Gets the request message matcher.
            </summary>
            <typeparam name="T">Type of IRequestMatcher</typeparam>
            <returns>A RequestMatcher</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithClientIP(WireMock.Matchers.IStringMatcher[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IClientIPRequestBuilder.WithClientIP(WireMock.Matchers.IStringMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithClientIP(System.String[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IClientIPRequestBuilder.WithClientIP(System.String[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithClientIP(WireMock.Matchers.MatchBehaviour,System.String[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IClientIPRequestBuilder.WithClientIP(System.String[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithClientIP(System.Func{System.String,System.Boolean}[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IClientIPRequestBuilder.WithClientIP(System.Func{System.String,System.Boolean}[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithPath(WireMock.Matchers.IStringMatcher[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithPath(WireMock.Matchers.IStringMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithPath(System.String[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithPath(System.String[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithPath(WireMock.Matchers.MatchBehaviour,System.String[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithPath(WireMock.Matchers.MatchBehaviour,System.String[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithPath(System.Func{System.String,System.Boolean}[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithPath(System.Func{System.String,System.Boolean}[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithUrl(WireMock.Matchers.IStringMatcher[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithUrl(WireMock.Matchers.IStringMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithUrl(System.String[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithUrl(System.String[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithUrl(WireMock.Matchers.MatchBehaviour,System.String[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithUrl(WireMock.Matchers.MatchBehaviour,System.String[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithUrl(System.Func{System.String,System.Boolean}[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithUrl(System.Func{System.String,System.Boolean}[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingConnect(WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingConnect(WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingDelete(WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingDelete(WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingGet(WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingGet(WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingHead(WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingHead(WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingOptions(WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingOptions(WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingPost(WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingPost(WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingPatch(WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingPatch(WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingPut(WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingPut(WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingTrace(WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingTrace(WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingAnyMethod">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingAnyMethod"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingAnyVerb">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingAnyVerb"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingMethod(System.String[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingMethod(System.String[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingVerb(System.String[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingVerb(System.String[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingMethod(WireMock.Matchers.MatchBehaviour,System.String[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingMethod(WireMock.Matchers.MatchBehaviour,System.String[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(System.String,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.String,WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(System.Byte[],WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Byte[],WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(System.Object,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Object,WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(WireMock.Matchers.IMatcher)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(WireMock.Matchers.IMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(WireMock.Matchers.IMatcher[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(WireMock.Matchers.IMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(System.Func{System.String,System.Boolean})">
            <inheritdoc cref="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Func{System.String,System.Boolean})"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(System.Func{System.Byte[],System.Boolean})">
            <inheritdoc cref="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Func{System.Byte[],System.Boolean})"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(System.Func{System.Object,System.Boolean})">
            <inheritdoc cref="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Func{System.Object,System.Boolean})"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(System.Func{WireMock.Util.IBodyData,System.Boolean})">
            <inheritdoc cref="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Func{WireMock.Util.IBodyData,System.Boolean})"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithCookie(System.String,System.String,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.String,WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithCookie(System.String,System.String,System.Boolean,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.String,System.Boolean,WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithCookie(System.String,System.String[],WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.String[],WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithCookie(System.String,System.String[],System.Boolean,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.String[],System.Boolean,WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithCookie(System.String,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,WireMock.Matchers.IStringMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithCookie(System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithCookie(System.String,System.Boolean,WireMock.Matchers.MatchBehaviour,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.String,WireMock.Matchers.IStringMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithCookie(System.Func{System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean}[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.ICookiesRequestBuilder.WithCookie(System.Func{System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean}[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithHeader(System.String,System.String,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,System.String,WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithHeader(System.String,System.String,System.Boolean,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,System.String,System.Boolean,WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithHeader(System.String,System.String[],WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,System.String[],WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithHeader(System.String,System.String[],System.Boolean,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,System.String[],System.Boolean,WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithHeader(System.String,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,WireMock.Matchers.IStringMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithHeader(System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithHeader(System.String,System.Boolean,WireMock.Matchers.MatchBehaviour,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.String,WireMock.Matchers.IStringMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithHeader(System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Boolean}[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IHeadersRequestBuilder.WithHeader(System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Boolean}[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.String,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.String,System.Boolean,WireMock.Matchers.MatchBehaviour)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,System.Boolean,WireMock.Matchers.MatchBehaviour)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.String,System.String[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,System.String[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.String,System.Boolean,System.String[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,System.Boolean,System.String[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.String,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.IStringMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,System.Boolean,WireMock.Matchers.IStringMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.String,WireMock.Matchers.MatchBehaviour,System.String[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.MatchBehaviour,System.String[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.String,WireMock.Matchers.MatchBehaviour,System.Boolean,System.String[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.MatchBehaviour,System.Boolean,System.String[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.String,WireMock.Matchers.MatchBehaviour,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.MatchBehaviour,WireMock.Matchers.IStringMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.String,WireMock.Matchers.MatchBehaviour,System.Boolean,WireMock.Matchers.IStringMatcher[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,WireMock.Matchers.MatchBehaviour,System.Boolean,WireMock.Matchers.IStringMatcher[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.Func{System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}},System.Boolean}[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.Func{System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}},System.Boolean}[])"/>
        </member>
        <member name="T:WireMock.RequestMessage">
            <summary>
            The RequestMessage.
            </summary>
        </member>
        <member name="P:WireMock.RequestMessage.ClientIP">
            <inheritdoc cref="P:WireMock.IRequestMessage.ClientIP" />
        </member>
        <member name="P:WireMock.RequestMessage.Url">
            <inheritdoc cref="P:WireMock.IRequestMessage.Url" />
        </member>
        <member name="P:WireMock.RequestMessage.AbsoluteUrl">
            <inheritdoc cref="P:WireMock.IRequestMessage.AbsoluteUrl" />
        </member>
        <member name="P:WireMock.RequestMessage.ProxyUrl">
            <inheritdoc cref="P:WireMock.IRequestMessage.ProxyUrl" />
        </member>
        <member name="P:WireMock.RequestMessage.DateTime">
            <inheritdoc cref="P:WireMock.IRequestMessage.DateTime" />
        </member>
        <member name="P:WireMock.RequestMessage.Path">
            <inheritdoc cref="P:WireMock.IRequestMessage.Path" />
        </member>
        <member name="P:WireMock.RequestMessage.AbsolutePath">
            <inheritdoc cref="P:WireMock.IRequestMessage.AbsolutePath" />
        </member>
        <member name="P:WireMock.RequestMessage.PathSegments">
            <inheritdoc cref="P:WireMock.IRequestMessage.PathSegments" />
        </member>
        <member name="P:WireMock.RequestMessage.AbsolutePathSegments">
            <inheritdoc cref="P:WireMock.IRequestMessage.AbsolutePathSegments" />
        </member>
        <member name="P:WireMock.RequestMessage.Method">
            <inheritdoc cref="P:WireMock.IRequestMessage.Method" />
        </member>
        <member name="P:WireMock.RequestMessage.Headers">
            <inheritdoc cref="P:WireMock.IRequestMessage.Headers" />
        </member>
        <member name="P:WireMock.RequestMessage.Cookies">
            <inheritdoc cref="P:WireMock.IRequestMessage.Cookies" />
        </member>
        <member name="P:WireMock.RequestMessage.Query">
            <inheritdoc cref="P:WireMock.IRequestMessage.Query" />
        </member>
        <member name="P:WireMock.RequestMessage.RawQuery">
            <inheritdoc cref="P:WireMock.IRequestMessage.RawQuery" />
        </member>
        <member name="P:WireMock.RequestMessage.BodyData">
            <inheritdoc cref="P:WireMock.IRequestMessage.BodyData" />
        </member>
        <member name="P:WireMock.RequestMessage.Body">
            <inheritdoc cref="P:WireMock.IRequestMessage.Body" />
        </member>
        <member name="P:WireMock.RequestMessage.BodyAsJson">
            <inheritdoc cref="P:WireMock.IRequestMessage.BodyAsJson" />
        </member>
        <member name="P:WireMock.RequestMessage.BodyAsBytes">
            <inheritdoc cref="P:WireMock.IRequestMessage.BodyAsBytes" />
        </member>
        <member name="P:WireMock.RequestMessage.DetectedBodyType">
            <inheritdoc cref="P:WireMock.IRequestMessage.DetectedBodyType" />
        </member>
        <member name="P:WireMock.RequestMessage.DetectedBodyTypeFromContentType">
            <inheritdoc cref="P:WireMock.IRequestMessage.DetectedBodyTypeFromContentType" />
        </member>
        <member name="P:WireMock.RequestMessage.DetectedCompression">
            <inheritdoc cref="P:WireMock.IRequestMessage.DetectedCompression" />
        </member>
        <member name="P:WireMock.RequestMessage.Host">
            <inheritdoc cref="P:WireMock.IRequestMessage.Host" />
        </member>
        <member name="P:WireMock.RequestMessage.Protocol">
            <inheritdoc cref="P:WireMock.IRequestMessage.Protocol" />
        </member>
        <member name="P:WireMock.RequestMessage.Port">
            <inheritdoc cref="P:WireMock.IRequestMessage.Port" />
        </member>
        <member name="P:WireMock.RequestMessage.Origin">
            <inheritdoc cref="P:WireMock.IRequestMessage.Origin" />
        </member>
        <member name="M:WireMock.RequestMessage.#ctor(WireMock.Models.UrlDetails,System.String,System.String,WireMock.Util.IBodyData,System.Collections.Generic.IDictionary{System.String,System.String[]},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.RequestMessage"/> class.
            </summary>
            <param name="urlDetails">The original url details.</param>
            <param name="method">The HTTP method.</param>
            <param name="clientIP">The client IP Address.</param>
            <param name="bodyData">The BodyData.</param>
            <param name="headers">The headers.</param>
            <param name="cookies">The cookies.</param>
        </member>
        <member name="M:WireMock.RequestMessage.GetParameter(System.String,System.Boolean)">
            <summary>
            Get a query parameter.
            </summary>
            <param name="key">The key.</param>
            <param name="ignoreCase">Defines if the key should be matched using case-ignore.</param>
            <returns>The query parameter.</returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.BodyDestinationFormat">
            <summary>
            Defines the BodyDestinationFormat
            </summary>
        </member>
        <member name="F:WireMock.ResponseBuilders.BodyDestinationFormat.SameAsSource">
            <summary>
            Same as source (no conversion)
            </summary>
        </member>
        <member name="F:WireMock.ResponseBuilders.BodyDestinationFormat.String">
            <summary>
            Convert to string
            </summary>
        </member>
        <member name="F:WireMock.ResponseBuilders.BodyDestinationFormat.Bytes">
            <summary>
            Convert to bytes
            </summary>
        </member>
        <member name="F:WireMock.ResponseBuilders.BodyDestinationFormat.Json">
            <summary>
            Convert to Json object
            </summary>
        </member>
        <member name="T:WireMock.ResponseBuilders.IBodyResponseBuilder">
            <summary>
            The BodyResponseBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBody(System.String,System.String,System.Text.Encoding)">
            <summary>
            WithBody : Create a ... response based on a string.
            </summary>
            <param name="body">The body.</param>
            <param name="destination">The Body Destination format (SameAsSource, String or Bytes).</param>
            <param name="encoding">The body encoding.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBody(System.Func{WireMock.RequestMessage,System.String},System.String,System.Text.Encoding)">
            <summary>
            WithBody : Create a ... response based on a callback function.
            </summary>
            <param name="bodyFactory">The delegate to build the body.</param>
            <param name="destination">The Body Destination format (SameAsSource, String or Bytes).</param>
            <param name="encoding">The body encoding.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBody(System.Func{WireMock.RequestMessage,System.Threading.Tasks.Task{System.String}},System.String,System.Text.Encoding)">
            <summary>
            WithBody : Create a ... response based on a callback function.
            </summary>
            <param name="bodyFactory">The async delegate to build the body.</param>
            <param name="destination">The Body Destination format (SameAsSource, String or Bytes).</param>
            <param name="encoding">The body encoding.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBody(System.Byte[],System.String,System.Text.Encoding)">
            <summary>
            WithBody : Create a ... response based on a bytearray.
            </summary>
            <param name="body">The body.</param>
            <param name="destination">The Body Destination format (SameAsSource, String or Bytes).</param>
            <param name="encoding">The body encoding.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBodyAsJson(System.Object,System.Text.Encoding,System.Nullable{System.Boolean})">
            <summary>
            WithBody : Create a string response based on a object (which will be converted to a JSON string).
            </summary>
            <param name="body">The body.</param>
            <param name="encoding">The body encoding.</param>
            <param name="indented">Use JSON indented.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBodyAsJson(System.Object,System.Boolean)">
            <summary>
            WithBody : Create a string response based on a object (which will be converted to a JSON string).
            </summary>
            <param name="body">The body.</param>
            <param name="indented">Define whether child objects to be indented according to the Newtonsoft.Json.JsonTextWriter.Indentation and Newtonsoft.Json.JsonTextWriter.IndentChar settings.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBodyFromFile(System.String,System.Boolean)">
            <summary>
            WithBodyFromFile : Create a ... response based on a File.
            </summary>
            <param name="filename">The filename.</param>
            <param name="cache">Defines if this file is cached in memory or retrieved from disk every time the response is created.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.ICallbackResponseBuilder">
            <summary>
            The CallbackResponseBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.ICallbackResponseBuilder.WithCallback(System.Func{WireMock.RequestMessage,WireMock.ResponseMessage})">
            <summary>
            The callback builder
            </summary>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.ICallbackResponseBuilder.WithCallback(System.Func{WireMock.RequestMessage,System.Threading.Tasks.Task{WireMock.ResponseMessage}})">
            <summary>
            The async callback builder
            </summary>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.IDelayResponseBuilder">
            <summary>
            The DelayResponseBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.IDelayResponseBuilder.WithDelay(System.TimeSpan)">
            <summary>
            The with delay.
            </summary>
            <param name="delay">The TimeSpan to delay.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IDelayResponseBuilder.WithDelay(System.Int32)">
            <summary>
            The with delay.
            </summary>
            <param name="milliseconds">The milliseconds to delay.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IDelayResponseBuilder.WithRandomDelay(System.Int32,System.Int32)">
            <summary>
            Introduce random delay
            </summary>
            <param name="minimumMilliseconds">Minimum milliseconds to delay</param>
            <param name="maximumMilliseconds">Maximum milliseconds to delay</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.IFaultResponseBuilder">
            <summary>
            The FaultRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.IFaultResponseBuilder.WithFault(WireMock.ResponseBuilders.FaultType,System.Nullable{System.Double})">
            <summary>
            WithBody : Create a fault response.
            </summary>
            <param name="faultType">The FaultType.</param>
            <param name="percentage">The percentage when this fault should occur. When null, it's always a fault.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.IHeadersResponseBuilder">
            <summary>
            The HeadersResponseBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithHeader(System.String,System.String[])">
            <summary>
            The with header.
            </summary>
            <param name="name">The name.</param>
            <param name="values">The values.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            The with headers.
            </summary>
            <param name="headers">The headers.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.String[]})">
            <summary>
            The with headers.
            </summary>
            <param name="headers">The headers.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}})">
            <summary>
            The with headers.
            </summary>
            <param name="headers">The headers.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.IProxyResponseBuilder">
            <summary>
            The ProxyResponseBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.IProxyResponseBuilder.WithProxy(System.String,System.String)">
            <summary>
            WithProxy URL using Client X509Certificate2.
            </summary>
            <param name="proxyUrl">The proxy url.</param>
            <param name="clientX509Certificate2ThumbprintOrSubjectName">The X509Certificate2 file to use for client authentication.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IProxyResponseBuilder.WithProxy(WireMock.Settings.IProxyAndRecordSettings)">
            <summary>
            WithProxy using IProxyAndRecordSettings.
            </summary>
            <param name="settings">The IProxyAndRecordSettings.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.IResponseBuilder">
            <summary>
            The ResponseBuilder interface.
            </summary>
        </member>
        <member name="T:WireMock.ResponseBuilders.IStatusCodeResponseBuilder">
            <summary>
            The StatusCodeResponseBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.IStatusCodeResponseBuilder.WithStatusCode(System.Int32)">
            <summary>
            The with status code.
            By default all status codes are allowed, to change this behaviour, see <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.AllowOnlyDefinedHttpStatusCodeInResponse"/>.
            </summary>
            <param name="code">The code.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IStatusCodeResponseBuilder.WithStatusCode(System.String)">
            <summary>
            The with status code.
            By default all status codes are allowed, to change this behaviour, see <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.AllowOnlyDefinedHttpStatusCodeInResponse"/>.
            </summary>
            <param name="code">The code.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IStatusCodeResponseBuilder.WithStatusCode(System.Net.HttpStatusCode)">
            <summary>
            The with status code.
            By default all status codes are allowed, to change this behaviour, see <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.AllowOnlyDefinedHttpStatusCodeInResponse"/>.
            </summary>
            <param name="code">The code.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IStatusCodeResponseBuilder.WithSuccess">
            <summary>
            The with Success status code (200).
            </summary>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IStatusCodeResponseBuilder.WithNotFound">
            <summary>
            The with NotFound status code (404).
            </summary>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.ITransformResponseBuilder">
            <summary>
            The TransformResponseBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.ITransformResponseBuilder.WithTransformer(System.Boolean)">
            <summary>
            Use the Handlebars.Net ResponseMessage transformer.
            </summary>
            <returns>
            The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.
            </returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.ITransformResponseBuilder.WithTransformer(WireMock.Types.ReplaceNodeOptions)">
            <summary>
            Use the Handlebars.Net ResponseMessage transformer.
            </summary>
            <returns>
            The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.
            </returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.ITransformResponseBuilder.WithTransformer(WireMock.Types.TransformerType,System.Boolean,WireMock.Types.ReplaceNodeOptions)">
            <summary>
            Use a specific ResponseMessage transformer.
            </summary>
            <returns>
            The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.
            </returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.Response">
            <summary>
            The Response.
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.MinimumDelayMilliseconds">
            <summary>
            The minimum random delay in milliseconds.
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.MaximumDelayMilliseconds">
            <summary>
            The maximum random delay in milliseconds.
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.Delay">
            <summary>
            The delay
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.UseTransformer">
            <summary>
            Gets a value indicating whether [use transformer].
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.TransformerType">
            <summary>
            Gets the type of the transformer.
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.UseTransformerForBodyAsFile">
            <summary>
            Gets a value indicating whether to use the Handlebars transformer for the content from the referenced BodyAsFile.
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.TransformerReplaceNodeOptions">
            <summary>
            Gets the ReplaceNodeOptions to use when transforming a JSON node.
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.ResponseMessage">
            <summary>
            Gets the response message.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.Create(WireMock.ResponseMessage)">
            <summary>
            Creates this instance.
            </summary>
            <param name="responseMessage">ResponseMessage</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.Create(System.Func{WireMock.ResponseMessage})">
            <summary>
            Creates this instance with the specified function.
            </summary>
            <param name="func">The callback function.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.#ctor(WireMock.ResponseMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.ResponseBuilders.Response"/> class.
            </summary>
            <param name="responseMessage">
            The response.
            </param>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithStatusCode(System.Int32)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IStatusCodeResponseBuilder.WithStatusCode(System.Int32)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithStatusCode(System.String)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IStatusCodeResponseBuilder.WithStatusCode(System.String)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithStatusCode(System.Net.HttpStatusCode)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IStatusCodeResponseBuilder.WithStatusCode(System.Net.HttpStatusCode)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithSuccess">
            <summary>
            The with Success status code (200).
            </summary>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithNotFound">
            <summary>
            The with NotFound status code (404).
            </summary>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithHeader(System.String,System.String[])">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithHeader(System.String,System.String[])"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.String})"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.String[]})">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.String[]})"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithHeaders(System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}})">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}})"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBody(System.Func{WireMock.RequestMessage,System.String},System.String,System.Text.Encoding)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBody(System.Func{WireMock.RequestMessage,System.String},System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBody(System.Func{WireMock.RequestMessage,System.Threading.Tasks.Task{System.String}},System.String,System.Text.Encoding)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBody(System.Func{WireMock.RequestMessage,System.Threading.Tasks.Task{System.String}},System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBody(System.Byte[],System.String,System.Text.Encoding)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBody(System.Byte[],System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBodyFromFile(System.String,System.Boolean)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBodyFromFile(System.String,System.Boolean)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBody(System.String,System.String,System.Text.Encoding)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBody(System.String,System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBodyAsJson(System.Object,System.Text.Encoding,System.Nullable{System.Boolean})">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBodyAsJson(System.Object,System.Text.Encoding,System.Nullable{System.Boolean})"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBodyAsJson(System.Object,System.Boolean)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBodyAsJson(System.Object,System.Boolean)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithTransformer(System.Boolean)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.ITransformResponseBuilder.WithTransformer(System.Boolean)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithTransformer(WireMock.Types.ReplaceNodeOptions)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.ITransformResponseBuilder.WithTransformer(WireMock.Types.ReplaceNodeOptions)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithTransformer(WireMock.Types.TransformerType,System.Boolean,WireMock.Types.ReplaceNodeOptions)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.ITransformResponseBuilder.WithTransformer(WireMock.Types.TransformerType,System.Boolean,WireMock.Types.ReplaceNodeOptions)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithDelay(System.TimeSpan)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IDelayResponseBuilder.WithDelay(System.TimeSpan)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithDelay(System.Int32)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IDelayResponseBuilder.WithDelay(System.Int32)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithRandomDelay(System.Int32,System.Int32)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IDelayResponseBuilder.WithRandomDelay(System.Int32,System.Int32)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.ProvideResponseAsync(WireMock.RequestMessage,WireMock.Settings.IWireMockServerSettings)">
            <inheritdoc cref="M:WireMock.ResponseProviders.IResponseProvider.ProvideResponseAsync(WireMock.RequestMessage,WireMock.Settings.IWireMockServerSettings)"/>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.Callback">
            <summary>
            A delegate to execute to generate the response.
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.CallbackAsync">
            <summary>
            A delegate to execute to generate the response async.
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.WithCallbackUsed">
            <summary>
            Defines if the method WithCallback(...) is used.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithCallback(System.Func{WireMock.RequestMessage,WireMock.ResponseMessage})">
            <inheritdoc cref="M:WireMock.ResponseBuilders.ICallbackResponseBuilder.WithCallback(System.Func{WireMock.RequestMessage,WireMock.ResponseMessage})"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithCallback(System.Func{WireMock.RequestMessage,System.Threading.Tasks.Task{WireMock.ResponseMessage}})">
            <inheritdoc cref="M:WireMock.ResponseBuilders.ICallbackResponseBuilder.WithCallback(System.Func{WireMock.RequestMessage,System.Threading.Tasks.Task{WireMock.ResponseMessage}})"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithFault(WireMock.ResponseBuilders.FaultType,System.Nullable{System.Double})">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IFaultResponseBuilder.WithFault(WireMock.ResponseBuilders.FaultType,System.Nullable{System.Double})"/>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.ProxyAndRecordSettings">
            <summary>
            The WebProxy settings.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithProxy(System.String,System.String)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IProxyResponseBuilder.WithProxy(System.String,System.String)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithProxy(WireMock.Settings.IProxyAndRecordSettings)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IProxyResponseBuilder.WithProxy(WireMock.Settings.IProxyAndRecordSettings)"/>
        </member>
        <member name="T:WireMock.ResponseMessage">
            <summary>
            The ResponseMessage.
            </summary>
        </member>
        <member name="P:WireMock.ResponseMessage.Headers">
            <inheritdoc cref="P:WireMock.IResponseMessage.Headers" />
        </member>
        <member name="P:WireMock.ResponseMessage.StatusCode">
            <inheritdoc cref="P:WireMock.IResponseMessage.StatusCode" />
        </member>
        <member name="P:WireMock.ResponseMessage.BodyOriginal">
            <inheritdoc cref="P:WireMock.IResponseMessage.BodyOriginal" />
        </member>
        <member name="P:WireMock.ResponseMessage.BodyDestination">
            <inheritdoc cref="P:WireMock.IResponseMessage.BodyDestination" />
        </member>
        <member name="P:WireMock.ResponseMessage.BodyData">
            <inheritdoc cref="P:WireMock.IResponseMessage.BodyData" />
        </member>
        <member name="P:WireMock.ResponseMessage.FaultType">
            <inheritdoc cref="P:WireMock.IResponseMessage.FaultType" />
        </member>
        <member name="P:WireMock.ResponseMessage.FaultPercentage">
            <inheritdoc cref="P:WireMock.IResponseMessage.FaultPercentage" />
        </member>
        <member name="M:WireMock.ResponseMessage.AddHeader(System.String,System.String)">
            <inheritdoc cref="M:WireMock.IResponseMessage.AddHeader(System.String,System.String)" />
        </member>
        <member name="M:WireMock.ResponseMessage.AddHeader(System.String,System.String[])">
            <inheritdoc cref="M:WireMock.IResponseMessage.AddHeader(System.String,System.String[])" />
        </member>
        <member name="T:WireMock.ResponseProviders.IResponseProvider">
            <summary>
            The Response Provider interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseProviders.IResponseProvider.ProvideResponseAsync(WireMock.RequestMessage,WireMock.Settings.IWireMockServerSettings)">
            <summary>
            The provide response.
            </summary>
            <param name="requestMessage">The request.</param>
            <param name="settings">The WireMockServerSettings.</param>
            <returns>The <see cref="T:WireMock.ResponseMessage"/> including a new (optional) <see cref="T:WireMock.IMapping"/>.</returns>
        </member>
        <member name="T:WireMock.ScenarioState">
            <summary>
            The ScenarioState
            </summary>
        </member>
        <member name="P:WireMock.ScenarioState.Name">
            <summary>
            Gets or sets the Name (from the Scenario).
            </summary>
        </member>
        <member name="P:WireMock.ScenarioState.NextState">
            <summary>
            Gets or sets the NextState.
            </summary>
        </member>
        <member name="P:WireMock.ScenarioState.Started">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WireMock.ScenarioState"/> is started.
            </summary>
        </member>
        <member name="P:WireMock.ScenarioState.Finished">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WireMock.ScenarioState"/> is finished.
            </summary>
        </member>
        <member name="P:WireMock.ScenarioState.Counter">
            <summary>
            Gets or sets the state counter.
            </summary>
        </member>
        <member name="T:WireMock.Server.IRespondWithAProvider">
            <summary>
            IRespondWithAProvider
            </summary>
        </member>
        <member name="P:WireMock.Server.IRespondWithAProvider.Guid">
            <summary>
            Gets the unique identifier for this mapping.
            </summary>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithGuid(System.Guid)">
            <summary>
            Define a unique identifier for this mapping.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithTimeSettings(WireMock.Models.ITimeSettings)">
            <summary>
            Define the TimeSettings for this mapping.
            </summary>
            <param name="timeSettings">The TimeSettings.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithTitle(System.String)">
            <summary>
            Define a unique title for this mapping.
            </summary>
            <param name="title">The unique title.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithPath(System.String)">
            <summary>
            Define the full filepath for this mapping.
            </summary>
            <param name="path">The full filepath.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithGuid(System.String)">
            <summary>
            Define a unique identifier for this mapping.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.AtPriority(System.Int32)">
            <summary>
            Define the priority for this mapping.
            </summary>
            <param name="priority">The priority.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.RespondWith(WireMock.ResponseProviders.IResponseProvider)">
            <summary>
            The respond with.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.InScenario(System.String)">
            <summary>
            Sets the the scenario.
            </summary>
            <param name="scenario">The scenario.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.InScenario(System.Int32)">
            <summary>
            Sets the the scenario with an integer value.
            </summary>
            <param name="scenario">The scenario.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WhenStateIs(System.String)">
            <summary>
            Execute this respond only in case the current state is equal to specified one.
            </summary>
            <param name="state">Any object which identifies the current state</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WhenStateIs(System.Int32)">
            <summary>
            Execute this respond only in case the current state is equal to specified one.
            </summary>
            <param name="state">Any object which identifies the current state</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WillSetStateTo(System.String,System.Nullable{System.Int32})">
            <summary>
            Once this mapping is executed the state will be changed to specified one.
            </summary>
            <param name="state">Any object which identifies the new state</param>
            <param name="times">The number of times this match should be matched before the state will be changed to the specified one. Default value is 1.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WillSetStateTo(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Once this mapping is executed the state will be changed to specified one.
            </summary>
            <param name="state">Any object which identifies the new state</param>
            <param name="times">The number of times this match should be matched before the state will be changed to the specified one. Default value is 1.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithWebhook(WireMock.Models.IWebhook[])">
            <summary>
            Add (multiple) Webhook(s) to call after the response has been generated.
            </summary>
            <param name="webhooks">The Webhooks</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithWebhook(System.String,System.String,System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}},System.String,System.Boolean,WireMock.Types.TransformerType)">
            <summary>
            Add a Webhook to call after the response has been generated.
            </summary>
            <param name="url">The Webhook Url</param>
            <param name="method">The method to use. [optional]</param>
            <param name="headers">The Headers to send. [optional]</param>
            <param name="body">The body (as string) to send. [optional]</param>
            <param name="useTransformer">Use Transformer. [optional]</param>
            <param name="transformerType">The transformer type. [optional]</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithWebhook(System.String,System.String,System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}},System.Object,System.Boolean,WireMock.Types.TransformerType)">
            <summary>
            Add a Webhook to call after the response has been generated.
            </summary>
            <param name="url">The Webhook Url</param>
            <param name="method">The method to use. [optional]</param>
            <param name="headers">The Headers to send. [optional]</param>
            <param name="body">The body (as json) to send. [optional]</param>
            <param name="useTransformer">Use Transformer. [optional]</param>
            <param name="transformerType">The transformer type. [optional]</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="T:WireMock.Server.RespondWithAProvider">
            <summary>
            The respond with a provider.
            </summary>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.#ctor(WireMock.RegistrationCallback,WireMock.Matchers.Request.IRequestMatcher,WireMock.Settings.IWireMockServerSettings,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Server.RespondWithAProvider"/> class.
            </summary>
            <param name="registrationCallback">The registration callback.</param>
            <param name="requestMatcher">The request matcher.</param>
            <param name="settings">The WireMockServerSettings.</param>
            <param name="saveToFile">Optional boolean to indicate if this mapping should be saved as static mapping file.</param>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.RespondWith(WireMock.ResponseProviders.IResponseProvider)">
            <summary>
            The respond with.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithGuid(System.String)">
            <see cref="M:WireMock.Server.IRespondWithAProvider.WithGuid(System.String)"/>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithGuid(System.Guid)">
            <see cref="M:WireMock.Server.IRespondWithAProvider.WithGuid(System.Guid)"/>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithTitle(System.String)">
            <see cref="M:WireMock.Server.IRespondWithAProvider.WithTitle(System.String)"/>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithPath(System.String)">
            <see cref="M:WireMock.Server.IRespondWithAProvider.WithPath(System.String)"/>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.AtPriority(System.Int32)">
            <see cref="M:WireMock.Server.IRespondWithAProvider.AtPriority(System.Int32)"/>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.InScenario(System.String)">
            <see cref="M:WireMock.Server.IRespondWithAProvider.InScenario(System.String)"/>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.InScenario(System.Int32)">
            <see cref="M:WireMock.Server.IRespondWithAProvider.InScenario(System.Int32)"/>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WhenStateIs(System.String)">
            <see cref="M:WireMock.Server.IRespondWithAProvider.WhenStateIs(System.String)"/>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WhenStateIs(System.Int32)">
            <see cref="M:WireMock.Server.IRespondWithAProvider.WhenStateIs(System.Int32)"/>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WillSetStateTo(System.String,System.Nullable{System.Int32})">
            <see cref="M:WireMock.Server.IRespondWithAProvider.WillSetStateTo(System.String,System.Nullable{System.Int32})"/>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WillSetStateTo(System.Int32,System.Nullable{System.Int32})">
            <see cref="M:WireMock.Server.IRespondWithAProvider.WillSetStateTo(System.Int32,System.Nullable{System.Int32})"/>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithTimeSettings(WireMock.Models.ITimeSettings)">
            <inheritdoc />
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithWebhook(WireMock.Models.IWebhook[])">
            <see cref="M:WireMock.Server.IRespondWithAProvider.WithWebhook(WireMock.Models.IWebhook[])"/>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithWebhook(System.String,System.String,System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}},System.String,System.Boolean,WireMock.Types.TransformerType)">
            <see cref="M:WireMock.Server.IRespondWithAProvider.WithWebhook(System.String,System.String,System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}},System.String,System.Boolean,WireMock.Types.TransformerType)"/>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithWebhook(System.String,System.String,System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}},System.Object,System.Boolean,WireMock.Types.TransformerType)">
            <see cref="M:WireMock.Server.IRespondWithAProvider.WithWebhook(System.String,System.String,System.Collections.Generic.IDictionary{System.String,WireMock.Types.WireMockList{System.String}},System.Object,System.Boolean,WireMock.Types.TransformerType)"/>
        </member>
        <member name="T:WireMock.Server.WireMockServer">
            <summary>
            The fluent mock server.
            </summary>
            <summary>
            The fluent mock server.
            </summary>
        </member>
        <member name="M:WireMock.Server.WireMockServer.SaveStaticMappings(System.String)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.SaveStaticMappings(System.String)" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.ReadStaticMappings(System.String)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.ReadStaticMappings(System.String)" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.WatchStaticMappings(System.String)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.WatchStaticMappings(System.String)" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.ReadStaticMappingAndAddOrUpdate(System.String)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.WatchStaticMappings(System.String)" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.FileHead(WireMock.RequestMessage)">
            <summary>
            Checks if file exists.
            Note: Response is returned with no body as a head request doesn't accept a body, only the status code.
            </summary>
            <param name="requestMessage">The request message.</param>
        </member>
        <member name="P:WireMock.Server.WireMockServer.IsStarted">
            <inheritdoc cref="P:WireMock.Server.IWireMockServer.IsStarted" />
        </member>
        <member name="P:WireMock.Server.WireMockServer.Ports">
            <inheritdoc cref="P:WireMock.Server.IWireMockServer.Ports" />
        </member>
        <member name="P:WireMock.Server.WireMockServer.Urls">
            <inheritdoc cref="P:WireMock.Server.IWireMockServer.Urls" />
        </member>
        <member name="P:WireMock.Server.WireMockServer.Mappings">
            <summary>
            Gets the mappings.
            </summary>
        </member>
        <member name="P:WireMock.Server.WireMockServer.MappingModels">
            <inheritdoc cref="P:WireMock.Server.IWireMockServer.MappingModels" />
        </member>
        <member name="P:WireMock.Server.WireMockServer.Scenarios">
            <summary>
            Gets the scenarios.
            </summary>
        </member>
        <member name="M:WireMock.Server.WireMockServer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WireMock.Server.WireMockServer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WireMock.Server.WireMockServer.Start(WireMock.Settings.IWireMockServerSettings)">
            <summary>
            Starts this WireMockServer with the specified settings.
            </summary>
            <param name="settings">The WireMockServerSettings.</param>
            <returns>The <see cref="T:WireMock.Server.WireMockServer"/>.</returns>
        </member>
        <member name="M:WireMock.Server.WireMockServer.Start(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Start this WireMockServer.
            </summary>
            <param name="port">The port.</param>
            <param name="ssl">The SSL support.</param>
            <returns>The <see cref="T:WireMock.Server.WireMockServer"/>.</returns>
        </member>
        <member name="M:WireMock.Server.WireMockServer.Start(System.String[])">
            <summary>
            Start this WireMockServer.
            </summary>
            <param name="urls">The urls to listen on.</param>
            <returns>The <see cref="T:WireMock.Server.WireMockServer"/>.</returns>
        </member>
        <member name="M:WireMock.Server.WireMockServer.StartWithAdminInterface(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Start this WireMockServer with the admin interface.
            </summary>
            <param name="port">The port.</param>
            <param name="ssl">The SSL support.</param>
            <returns>The <see cref="T:WireMock.Server.WireMockServer"/>.</returns>
        </member>
        <member name="M:WireMock.Server.WireMockServer.StartWithAdminInterface(System.String[])">
            <summary>
            Start this WireMockServer with the admin interface.
            </summary>
            <param name="urls">The urls.</param>
            <returns>The <see cref="T:WireMock.Server.WireMockServer"/>.</returns>
        </member>
        <member name="M:WireMock.Server.WireMockServer.StartWithAdminInterfaceAndReadStaticMappings(System.String[])">
            <summary>
            Start this WireMockServer with the admin interface and read static mappings.
            </summary>
            <param name="urls">The urls.</param>
            <returns>The <see cref="T:WireMock.Server.WireMockServer"/>.</returns>
        </member>
        <member name="M:WireMock.Server.WireMockServer.#ctor(WireMock.Settings.IWireMockServerSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Server.WireMockServer"/> class.
            </summary>
            <param name="settings">The settings.</param>
            <exception cref="T:WireMock.Exceptions.WireMockException">
            Service start failed with error: {_httpServer.RunningException.Message}
            or
            Service start failed with error: {startTask.Exception.Message}
            </exception>
            <exception cref="T:System.TimeoutException">Service start timed out after {TimeSpan.FromMilliseconds(settings.StartTimeout)}</exception>
        </member>
        <member name="M:WireMock.Server.WireMockServer.Stop">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.Stop" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.AddCatchAllMapping">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.AddCatchAllMapping" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.Reset">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.Reset" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.ResetMappings">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.ResetMappings" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.DeleteMapping(System.Guid)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.DeleteMapping(System.Guid)" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.AddGlobalProcessingDelay(System.TimeSpan)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.AddGlobalProcessingDelay(System.TimeSpan)" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.AllowPartialMapping(System.Boolean)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.AllowPartialMapping(System.Boolean)" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.SetAzureADAuthentication(System.String,System.String)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.SetAzureADAuthentication(System.String,System.String)" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.SetBasicAuthentication(System.String,System.String)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.SetBasicAuthentication(System.String,System.String)" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.RemoveAuthentication">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.RemoveAuthentication" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.SetMaxRequestLogCount(System.Nullable{System.Int32})">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.SetMaxRequestLogCount(System.Nullable{System.Int32})" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.SetRequestLogExpirationDuration(System.Nullable{System.Int32})">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.SetRequestLogExpirationDuration(System.Nullable{System.Int32})" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.ResetScenarios">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.ResetScenarios" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.WithMapping(WireMock.Admin.Mappings.MappingModel[])">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.WithMapping(WireMock.Admin.Mappings.MappingModel[])" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.WithMapping(System.String)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.WithMapping(System.String)" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.Given(WireMock.Matchers.Request.IRequestMatcher,System.Boolean)">
            <summary>
            The given.
            </summary>
            <param name="requestMatcher">The request matcher.</param>
            <param name="saveToFile">Optional boolean to indicate if this mapping should be saved as static mapping file.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.WireMockServer.ReadStaticWireMockOrgMappingAndAddOrUpdate(System.String)">
            <summary>
            Read WireMock.org mapping json file.
            </summary>
            <param name="path">The path to the WireMock.org mapping json file.</param>
        </member>
        <member name="E:WireMock.Server.WireMockServer.LogEntriesChanged">
            <inheritdoc cref="E:WireMock.Server.IWireMockServer.LogEntriesChanged" />
        </member>
        <member name="P:WireMock.Server.WireMockServer.LogEntries">
            <inheritdoc cref="P:WireMock.Server.IWireMockServer.LogEntries" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.FindLogEntries(WireMock.Matchers.Request.IRequestMatcher[])">
            <summary>
            The search log-entries based on matchers.
            </summary>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:System.Collections.IEnumerable"/>.</returns>
        </member>
        <member name="M:WireMock.Server.WireMockServer.ResetLogEntries">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.ResetLogEntries" />
        </member>
        <member name="M:WireMock.Server.WireMockServer.DeleteLogEntry(System.Guid)">
            <inheritdoc cref="M:WireMock.Server.IWireMockServer.DeleteLogEntry(System.Guid)" />
        </member>
        <member name="T:WireMock.Settings.HttpClientSettings">
            <summary>
            HttpClientSettings
            </summary>
        </member>
        <member name="P:WireMock.Settings.HttpClientSettings.ClientX509Certificate2ThumbprintOrSubjectName">
            <inheritdoc cref="P:WireMock.Settings.IHttpClientSettings.ClientX509Certificate2ThumbprintOrSubjectName"/>
        </member>
        <member name="P:WireMock.Settings.HttpClientSettings.WebProxySettings">
            <inheritdoc cref="P:WireMock.Settings.IHttpClientSettings.WebProxySettings"/>
        </member>
        <member name="P:WireMock.Settings.HttpClientSettings.AllowAutoRedirect">
            <inheritdoc cref="P:WireMock.Settings.IHttpClientSettings.AllowAutoRedirect"/>
        </member>
        <member name="T:WireMock.Settings.IHttpClientSettings">
            <summary>
            IHttpClientSettings
            </summary>
        </member>
        <member name="P:WireMock.Settings.IHttpClientSettings.ClientX509Certificate2ThumbprintOrSubjectName">
            <summary>
            The clientCertificate thumbprint or subject name fragment to use.
            Example thumbprint : "D2DBF135A8D06ACCD0E1FAD9BFB28678DF7A9818". Example subject name: "www.google.com""
            </summary>
        </member>
        <member name="P:WireMock.Settings.IHttpClientSettings.WebProxySettings">
            <summary>
            Defines the WebProxySettings.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IHttpClientSettings.AllowAutoRedirect">
            <summary>
            Proxy requests should follow redirection (30x).
            </summary>
        </member>
        <member name="T:WireMock.Settings.IProxyAndRecordSettings">
            <summary>
            IProxyAndRecordSettings
            </summary>
        </member>
        <member name="P:WireMock.Settings.IProxyAndRecordSettings.Url">
            <summary>
            The URL to proxy.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IProxyAndRecordSettings.SaveMapping">
            <summary>
            Save the mapping for each request/response to the internal Mappings.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IProxyAndRecordSettings.SaveMappingForStatusCodePattern">
            <summary>
            Only save request/response to the internal Mappings if the status code is included in this pattern. (Note that SaveMapping must also be set to true.)
            The pattern can contain a single value like "200", but also ranges like "2xx", "100,300,600" or "100-299,6xx" are supported.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IProxyAndRecordSettings.SaveMappingToFile">
            <summary>
            Save the mapping for each request/response to a .json mapping file.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IProxyAndRecordSettings.ExcludedHeaders">
            <summary>
            Defines a list from headers which will be excluded from the saved mappings.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IProxyAndRecordSettings.ExcludedCookies">
            <summary>
            Defines a list of cookies which will be excluded from the saved mappings.
            </summary>
        </member>
        <member name="T:WireMock.Settings.IWebhookSettings">
            <summary>
            IWebhookSettings
            </summary>
        </member>
        <member name="T:WireMock.Settings.IWebProxySettings">
            <summary>
            IWebProxySettings
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWebProxySettings.Address">
            <summary>
            A string instance that contains the address of the proxy server.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWebProxySettings.UserName">
            <summary>
            The user name associated with the credentials.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWebProxySettings.Password">
            <summary>
            The password for the user name associated with the credentials.
            </summary>
        </member>
        <member name="T:WireMock.Settings.IWireMockCertificateSettings">
             <summary>
             If https is used, these settings can be used to configure the CertificateSettings in case a custom certificate instead the default .NET certificate should be used.
            
             X509StoreName and X509StoreLocation should be defined
             OR
             X509CertificateFilePath and X509CertificatePassword should be defined
             </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockCertificateSettings.X509StoreName">
            <summary>
            X509 StoreName (AddressBook, AuthRoot, CertificateAuthority, My, Root, TrustedPeople or TrustedPublisher)
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockCertificateSettings.X509StoreLocation">
            <summary>
            X509 StoreLocation (CurrentUser or LocalMachine)
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockCertificateSettings.X509StoreThumbprintOrSubjectName">
            <summary>
            X509 Thumbprint or SubjectName (if not defined, the 'host' is used)
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockCertificateSettings.X509CertificateFilePath">
            <summary>
            X509Certificate FilePath
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockCertificateSettings.X509CertificatePassword">
            <summary>
            X509Certificate Password
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockCertificateSettings.IsDefined">
            <summary>
            X509StoreName and X509StoreLocation should be defined
            OR
            X509CertificateFilePath and X509CertificatePassword should be defined
            </summary>
        </member>
        <member name="T:WireMock.Settings.IWireMockServerSettings">
            <summary>
            IWireMockServerSettings
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.Port">
            <summary>
            Gets or sets the port.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.UseSSL">
            <summary>
            Gets or sets the use SSL.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.StartAdminInterface">
            <summary>
            Gets or sets whether to start admin interface.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.ReadStaticMappings">
            <summary>
            Gets or sets if the static mappings should be read at startup.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.WatchStaticMappings">
            <summary>
            Watch the static mapping files + folder for changes when running.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.WatchStaticMappingsInSubdirectories">
            <summary>
            A value indicating whether subdirectories within the static mappings path should be monitored.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.ProxyAndRecordSettings">
            <summary>
            Gets or sets if the proxy and record settings.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.Urls">
            <summary>
            Gets or sets the urls.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.StartTimeout">
            <summary>
            StartTimeout
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.AllowPartialMapping">
            <summary>
            Allow Partial Mapping (default set to false).
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.AdminUsername">
            <summary>
            The username needed for __admin access.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.AdminPassword">
            <summary>
            The password needed for __admin access.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.AdminAzureADTenant">
            <summary>
            The AzureAD Tenant needed for __admin access.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.AdminAzureADAudience">
            <summary>
            The AzureAD Audience / Resource for __admin access.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.RequestLogExpirationDuration">
            <summary>
            The RequestLog expiration in hours (optional).
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.MaxRequestLogCount">
            <summary>
            The MaxRequestLog count (optional).
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.PreWireMockMiddlewareInit">
            <summary>
            Action which is called (with the IAppBuilder or IApplicationBuilder) before the internal WireMockMiddleware is initialized. [Optional]
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.PostWireMockMiddlewareInit">
            <summary>
            Action which is called (with the IAppBuilder or IApplicationBuilder) after the internal WireMockMiddleware is initialized. [Optional]
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.Logger">
            <summary>
            The IWireMockLogger which logs Debug, Info, Warning or Error
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.FileSystemHandler">
            <summary>
            Handler to interact with the file system to read and write static mapping files.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.HandlebarsRegistrationCallback">
            <summary>
            Action which can be used to add additional Handlebars registrations. [Optional]
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.AllowCSharpCodeMatcher">
            <summary>
            Allow the usage of CSharpCodeMatcher (default is not allowed).
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.AllowBodyForAllHttpMethods">
            <summary>
            Allow a Body for all HTTP Methods. (default set to false).
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.AllowOnlyDefinedHttpStatusCodeInResponse">
            <summary>
            Allow only a HttpStatus Code in the response which is defined. (default set to false).
            - false : also null, 0, empty or invalid HttpStatus codes are allowed.
            - true  : only codes defined in <see cref="T:System.Net.HttpStatusCode"/> are allowed.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.DisableJsonBodyParsing">
            <summary>
            Set to true to disable Json deserialization when processing requests. (default set to false).
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.DisableRequestBodyDecompressing">
            <summary>
            Disable support for GZip and Deflate request body decompression. (default set to false).
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.HandleRequestsSynchronously">
            <summary>
            Handle all requests synchronously. (default set to false).
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.ThrowExceptionWhenMatcherFails">
            <summary>
            Throw an exception when the <see cref="T:WireMock.Matchers.IMatcher"/> fails because of invalid input. (default set to false).
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.CertificateSettings">
             <summary>
             If https is used, these settings can be used to configure the CertificateSettings in case a custom certificate instead the default .NET certificate should be used.
            
             X509StoreName and X509StoreLocation should be defined
             OR
             X509CertificateFilePath and X509CertificatePassword should be defined
             </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.CustomCertificateDefined">
            <summary>
            Defines if custom CertificateSettings are defined
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.WebhookSettings">
            <summary>
            Defines the global IWebhookSettings to use.
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.UseRegexExtended">
            <summary>
            Use the <see cref="T:WireMock.RegularExpressions.RegexExtended"/> instead of the default <see cref="T:System.Text.RegularExpressions.Regex"/> (default set to true).
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.SaveUnmatchedRequests">
            <summary>
            Save unmatched requests to a file using the <see cref="T:WireMock.Handlers.IFileSystemHandler"/> (default set to false).
            </summary>
        </member>
        <member name="P:WireMock.Settings.IWireMockServerSettings.CustomMatcherMappings">
            <summary>
            Custom matcher mappings for static mappings
            </summary>
        </member>
        <member name="T:WireMock.Settings.ProxyAndRecordSettings">
            <summary>
            ProxyAndRecordSettings
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.Url">
            <summary>
            The URL to proxy.
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.SaveMapping">
            <summary>
            Save the mapping for each request/response to the internal Mappings.
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.SaveMappingToFile">
            <summary>
            Save the mapping for each request/response also to a file. (Note that SaveMapping must also be set to true.)
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.SaveMappingForStatusCodePattern">
            <summary>
            Only save request/response to the internal Mappings if the status code is included in this pattern. (Note that SaveMapping must also be set to true.)
            The pattern can contain a single value like "200", but also ranges like "2xx", "100,300,600" or "100-299,6xx" are supported.
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.ExcludedHeaders">
            <inheritdoc cref="P:WireMock.Settings.IProxyAndRecordSettings.ExcludedHeaders"/>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.ExcludedCookies">
            <inheritdoc cref="P:WireMock.Settings.IProxyAndRecordSettings.ExcludedCookies"/>
        </member>
        <member name="T:WireMock.Settings.WebhookSettings">
            <summary>
            WebhookSettings
            </summary>
        </member>
        <member name="T:WireMock.Settings.WebProxySettings">
            <seealso cref="T:WireMock.Settings.IWebProxySettings" />
        </member>
        <member name="P:WireMock.Settings.WebProxySettings.Address">
            <inheritdoc cref="P:WireMock.Settings.IWebProxySettings.Address"/>
        </member>
        <member name="P:WireMock.Settings.WebProxySettings.UserName">
            <inheritdoc cref="P:WireMock.Settings.IWebProxySettings.UserName"/>
        </member>
        <member name="P:WireMock.Settings.WebProxySettings.Password">
            <inheritdoc cref="P:WireMock.Settings.IWebProxySettings.Password"/>
        </member>
        <member name="T:WireMock.Settings.WireMockCertificateSettings">
            <summary>
            <see cref="T:WireMock.Settings.IWireMockCertificateSettings"/>
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockCertificateSettings.X509StoreName">
            <inheritdoc cref="P:WireMock.Settings.IWireMockCertificateSettings.X509StoreName"/>
        </member>
        <member name="P:WireMock.Settings.WireMockCertificateSettings.X509StoreLocation">
            <inheritdoc cref="P:WireMock.Settings.IWireMockCertificateSettings.X509StoreLocation"/>
        </member>
        <member name="P:WireMock.Settings.WireMockCertificateSettings.X509StoreThumbprintOrSubjectName">
            <inheritdoc cref="P:WireMock.Settings.IWireMockCertificateSettings.X509StoreThumbprintOrSubjectName"/>
        </member>
        <member name="P:WireMock.Settings.WireMockCertificateSettings.X509CertificateFilePath">
            <inheritdoc cref="P:WireMock.Settings.IWireMockCertificateSettings.X509CertificateFilePath"/>
        </member>
        <member name="P:WireMock.Settings.WireMockCertificateSettings.X509CertificatePassword">
            <inheritdoc cref="P:WireMock.Settings.IWireMockCertificateSettings.X509CertificatePassword"/>
        </member>
        <member name="P:WireMock.Settings.WireMockCertificateSettings.IsDefined">
            <inheritdoc cref="P:WireMock.Settings.IWireMockCertificateSettings.IsDefined"/>
        </member>
        <member name="T:WireMock.Settings.WireMockServerSettings">
            <summary>
            WireMockServerSettings
            </summary>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.Port">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.Port"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.UseSSL">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.UseSSL"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.StartAdminInterface">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.StartAdminInterface"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.ReadStaticMappings">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.ReadStaticMappings"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.WatchStaticMappings">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.WatchStaticMappings"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.WatchStaticMappingsInSubdirectories">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.WatchStaticMappingsInSubdirectories"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.ProxyAndRecordSettings">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.ProxyAndRecordSettings"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.Urls">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.Urls"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.StartTimeout">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.StartTimeout"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.AllowPartialMapping">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.AllowPartialMapping"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.AdminUsername">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.AdminUsername"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.AdminPassword">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.AdminPassword"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.AdminAzureADTenant">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.AdminAzureADTenant"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.AdminAzureADAudience">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.AdminAzureADAudience"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.RequestLogExpirationDuration">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.RequestLogExpirationDuration"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.MaxRequestLogCount">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.MaxRequestLogCount"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.PreWireMockMiddlewareInit">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.PreWireMockMiddlewareInit"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.PostWireMockMiddlewareInit">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.PostWireMockMiddlewareInit"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.Logger">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.Logger"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.FileSystemHandler">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.FileSystemHandler"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.HandlebarsRegistrationCallback">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.HandlebarsRegistrationCallback"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.AllowCSharpCodeMatcher">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.AllowCSharpCodeMatcher"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.AllowBodyForAllHttpMethods">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.AllowBodyForAllHttpMethods"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.AllowOnlyDefinedHttpStatusCodeInResponse">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.AllowOnlyDefinedHttpStatusCodeInResponse"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.DisableJsonBodyParsing">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.DisableJsonBodyParsing"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.DisableRequestBodyDecompressing">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.DisableRequestBodyDecompressing"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.HandleRequestsSynchronously">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.HandleRequestsSynchronously"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.ThrowExceptionWhenMatcherFails">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.ThrowExceptionWhenMatcherFails"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.CertificateSettings">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.CertificateSettings"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.CustomCertificateDefined">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.CustomCertificateDefined"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.WebhookSettings">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.WebhookSettings"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.UseRegexExtended">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.UseRegexExtended"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.SaveUnmatchedRequests">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.SaveUnmatchedRequests"/>
        </member>
        <member name="P:WireMock.Settings.WireMockServerSettings.CustomMatcherMappings">
            <inheritdoc cref="P:WireMock.Settings.IWireMockServerSettings.CustomMatcherMappings"/>
        </member>
        <member name="T:WireMock.Settings.WireMockServerSettingsParser">
            <summary>
            A static helper class to parse commandline arguments into IWireMockServerSettings.
            </summary>
        </member>
        <member name="M:WireMock.Settings.WireMockServerSettingsParser.TryParseArguments(System.String[],WireMock.Settings.IWireMockServerSettings@,WireMock.Logging.IWireMockLogger)">
            <summary>
            Parse commandline arguments into WireMockServerSettings.
            </summary>
            <param name="args">The commandline arguments</param>
            <param name="logger">The logger (optional, can be null)</param>
            <param name="settings">The parsed settings</param>
        </member>
        <member name="T:WireMock.Validation.ValidatedNotNullAttribute">
            <summary>
            To fix 'xxx' is null on at least one execution path. See also https://rules.sonarsource.com/csharp/RSPEC-3900.
            </summary>
        </member>
    </members>
</doc>
